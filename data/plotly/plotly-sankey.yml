animatable: no
attributes:
  arrangement:
    description: If value is `snap` (the default), the node arrangement is assisted
      by automatic snapping of elements to preserve space between nodes specified
      via `nodepad`. If value is `perpendicular`, the nodes can only move along a
      line perpendicular to the flow. If value is `freeform`, the nodes can freely
      move on the plane. If value is `fixed`, the nodes are stationary.
    dflt: snap
    editType: calc
    valType: enumerated
    values:
    - snap
    - perpendicular
    - freeform
    - fixed
  customdata:
    description: Assigns extra data each datum. This may be useful when listening
      to hover, click and selection events. Note that, *scatter* traces also appends
      customdata items in the markers DOM elements
    editType: calc
    valType: data_array
  customdatasrc:
    description: Sets the source reference on Chart Studio Cloud for  customdata .
    editType: none
    valType: string
  domain:
    column:
      description: If there is a layout grid, use the domain for this column in the
        grid for this sankey trace .
      dflt: 0
      editType: calc
      min: 0
      valType: integer
    editType: calc
    role: object
    row:
      description: If there is a layout grid, use the domain for this row in the grid
        for this sankey trace .
      dflt: 0
      editType: calc
      min: 0
      valType: integer
    x:
      description: Sets the horizontal domain of this sankey trace (in plot fraction).
      dflt:
      - 0
      - 1
      editType: calc
      items:
        editType:
        - calc
        - calc
        max:
        - 1
        - 1
        min:
        - 0
        - 0
        valType:
        - number
        - number
      valType: info_array
    'y':
      description: Sets the vertical domain of this sankey trace (in plot fraction).
      dflt:
      - 0
      - 1
      editType: calc
      items:
        editType:
        - calc
        - calc
        max:
        - 1
        - 1
        min:
        - 0
        - 0
        valType:
        - number
        - number
      valType: info_array
  hoverinfo:
    arrayOk: no
    description: Determines which trace information appear on hover. If `none` or
      `skip` are set, no information is displayed upon hovering. But, if `none` is
      set, click and hover events are still fired. Note that this attribute is superseded
      by `node.hoverinfo` and `node.hoverinfo` for nodes and links respectively.
    dflt: all
    editType: calc
    extras:
    - all
    - none
    - skip
    flags: []
    valType: flaglist
  hoverlabel:
    align:
      arrayOk: yes
      description: Sets the horizontal alignment of the text content within hover
        label box. Has an effect only if the hover label text spans more two or more
        lines
      dflt: auto
      editType: calc
      valType: enumerated
      values:
      - left
      - right
      - auto
    alignsrc:
      description: Sets the source reference on Chart Studio Cloud for  align .
      editType: none
      valType: string
    bgcolor:
      arrayOk: yes
      description: Sets the background color of the hover labels for this trace
      editType: calc
      valType: color
    bgcolorsrc:
      description: Sets the source reference on Chart Studio Cloud for  bgcolor .
      editType: none
      valType: string
    bordercolor:
      arrayOk: yes
      description: Sets the border color of the hover labels for this trace.
      editType: calc
      valType: color
    bordercolorsrc:
      description: Sets the source reference on Chart Studio Cloud for  bordercolor
        .
      editType: none
      valType: string
    editType: calc
    font:
      color:
        arrayOk: yes
        editType: calc
        valType: color
      colorsrc:
        description: Sets the source reference on Chart Studio Cloud for  color .
        editType: none
        valType: string
      description: Sets the font used in hover labels.
      editType: calc
      family:
        arrayOk: yes
        description: HTML font family - the typeface that will be applied by the web
          browser. The web browser will only be able to apply a font if it is available
          on the system which it operates. Provide multiple font families, separated
          by commas, to indicate the preference in which to apply fonts if they aren't
          available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com
          or on-premise) generates images on a server, where only a select number
          of fonts are installed and supported. These include *Arial*, *Balto*, *Courier
          New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old
          Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times
          New Roman*.
        editType: calc
        noBlank: yes
        strict: yes
        valType: string
      familysrc:
        description: Sets the source reference on Chart Studio Cloud for  family .
        editType: none
        valType: string
      role: object
      size:
        arrayOk: yes
        editType: calc
        min: 1
        valType: number
      sizesrc:
        description: Sets the source reference on Chart Studio Cloud for  size .
        editType: none
        valType: string
    namelength:
      arrayOk: yes
      description: Sets the default length (in number of characters) of the trace
        name in the hover labels for all traces. -1 shows the whole name regardless
        of length. 0-3 shows the first 0-3 characters, and an integer >3 will show
        the whole name if it is less than that many characters, but if it is longer,
        will truncate to `namelength - 3` characters and add an ellipsis.
      dflt: 15
      editType: calc
      min: -1
      valType: integer
    namelengthsrc:
      description: Sets the source reference on Chart Studio Cloud for  namelength
        .
      editType: none
      valType: string
    role: object
  ids:
    description: Assigns id labels to each datum. These ids for object constancy of
      data points during animation. Should be an array of strings, not numbers or
      any other type.
    editType: calc
    valType: data_array
  idssrc:
    description: Sets the source reference on Chart Studio Cloud for  ids .
    editType: none
    valType: string
  legendgrouptitle:
    editType: style
    font:
      color:
        editType: style
        valType: color
      description: Sets this legend group's title font.
      editType: style
      family:
        description: HTML font family - the typeface that will be applied by the web
          browser. The web browser will only be able to apply a font if it is available
          on the system which it operates. Provide multiple font families, separated
          by commas, to indicate the preference in which to apply fonts if they aren't
          available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com
          or on-premise) generates images on a server, where only a select number
          of fonts are installed and supported. These include *Arial*, *Balto*, *Courier
          New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old
          Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times
          New Roman*.
        editType: style
        noBlank: yes
        strict: yes
        valType: string
      role: object
      size:
        editType: style
        min: 1
        valType: number
    role: object
    text:
      description: Sets the title of the legend group.
      dflt: ''
      editType: style
      valType: string
  legendrank:
    description: Sets the legend rank for this trace. Items and groups with smaller
      ranks are presented on top/left side while with `*reversed* `legend.traceorder`
      they are on bottom/right side. The default legendrank is 1000, so that you can
      use ranks less than 1000 to place certain items before all unranked items, and
      ranks greater than 1000 to go after all unranked items.
    dflt: 1000
    editType: style
    valType: number
  link:
    color:
      arrayOk: yes
      description: Sets the `link` color. It can be a single value, or an array for
        specifying color for each `link`. If `link.color` is omitted, then by default,
        a translucent grey link will be used.
      editType: calc
      valType: color
    colorscales:
      items:
        concentrationscales:
          cmax:
            description: Sets the upper bound of the color domain.
            dflt: 1
            editType: calc
            valType: number
          cmin:
            description: Sets the lower bound of the color domain.
            dflt: 0
            editType: calc
            valType: number
          colorscale:
            description: 'Sets the colorscale. The colorscale must be an array containing
              arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or
              named color string. At minimum, a mapping for the lowest (0) and highest
              (1) values are required. For example, `[[0, ''rgb(0,0,255)''], [1, ''rgb(255,0,0)'']]`.
              To control the bounds of the colorscale in color space, use`cmin` and
              `cmax`. Alternatively, `colorscale` may be a palette name string of
              the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.'
            dflt:
            - '0'
            - '1'
            - white
            - black
            editType: calc
            impliedEdits:
              autocolorscale: no
            valType: colorscale
          editType: calc
          label:
            description: The label of the links to color based on their concentration
              within a flow.
            dflt: ''
            editType: calc
            valType: string
          name:
            description: 'When used in a template, named items are created in the
              output figure in addition to any items the figure already has in this
              array. You can modify these items in the output figure by making your
              own item with `templateitemname` matching this `name` alongside your
              modifications (including `visible: false` or `enabled: false` to hide
              it). Has no effect outside of a template.'
            editType: calc
            valType: string
          role: object
          templateitemname:
            description: 'Used to refer to a named item in this array in the template.
              Named items from the template will be created even without a matching
              item in the input figure, but you can modify one by making an item with
              `templateitemname` matching its `name`, alongside your modifications
              (including `visible: false` or `enabled: false` to hide it). If there
              is no template or no matching item, this item will be hidden unless
              you explicitly show it with `visible: true`.'
            editType: calc
            valType: string
      role: object
    colorsrc:
      description: Sets the source reference on Chart Studio Cloud for  color .
      editType: none
      valType: string
    customdata:
      description: Assigns extra data to each link.
      editType: calc
      valType: data_array
    customdatasrc:
      description: Sets the source reference on Chart Studio Cloud for  customdata
        .
      editType: none
      valType: string
    description: The links of the Sankey plot.
    editType: calc
    hoverinfo:
      description: Determines which trace information appear when hovering links.
        If `none` or `skip` are set, no information is displayed upon hovering. But,
        if `none` is set, click and hover events are still fired.
      dflt: all
      editType: calc
      valType: enumerated
      values:
      - all
      - none
      - skip
    hoverlabel:
      align:
        arrayOk: yes
        description: Sets the horizontal alignment of the text content within hover
          label box. Has an effect only if the hover label text spans more two or
          more lines
        dflt: auto
        editType: calc
        valType: enumerated
        values:
        - left
        - right
        - auto
      alignsrc:
        description: Sets the source reference on Chart Studio Cloud for  align .
        editType: none
        valType: string
      bgcolor:
        arrayOk: yes
        description: Sets the background color of the hover labels for this trace
        editType: calc
        valType: color
      bgcolorsrc:
        description: Sets the source reference on Chart Studio Cloud for  bgcolor
          .
        editType: none
        valType: string
      bordercolor:
        arrayOk: yes
        description: Sets the border color of the hover labels for this trace.
        editType: calc
        valType: color
      bordercolorsrc:
        description: Sets the source reference on Chart Studio Cloud for  bordercolor
          .
        editType: none
        valType: string
      editType: calc
      font:
        color:
          arrayOk: yes
          editType: calc
          valType: color
        colorsrc:
          description: Sets the source reference on Chart Studio Cloud for  color
            .
          editType: none
          valType: string
        description: Sets the font used in hover labels.
        editType: calc
        family:
          arrayOk: yes
          description: HTML font family - the typeface that will be applied by the
            web browser. The web browser will only be able to apply a font if it is
            available on the system which it operates. Provide multiple font families,
            separated by commas, to indicate the preference in which to apply fonts
            if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com
            or on-premise) generates images on a server, where only a select number
            of fonts are installed and supported. These include *Arial*, *Balto*,
            *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas
            One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*,
            *Times New Roman*.
          editType: calc
          noBlank: yes
          strict: yes
          valType: string
        familysrc:
          description: Sets the source reference on Chart Studio Cloud for  family
            .
          editType: none
          valType: string
        role: object
        size:
          arrayOk: yes
          editType: calc
          min: 1
          valType: number
        sizesrc:
          description: Sets the source reference on Chart Studio Cloud for  size .
          editType: none
          valType: string
      namelength:
        arrayOk: yes
        description: Sets the default length (in number of characters) of the trace
          name in the hover labels for all traces. -1 shows the whole name regardless
          of length. 0-3 shows the first 0-3 characters, and an integer >3 will show
          the whole name if it is less than that many characters, but if it is longer,
          will truncate to `namelength - 3` characters and add an ellipsis.
        dflt: 15
        editType: calc
        min: -1
        valType: integer
      namelengthsrc:
        description: Sets the source reference on Chart Studio Cloud for  namelength
          .
        editType: none
        valType: string
      role: object
    hovertemplate:
      arrayOk: yes
      description: 'Template string used for rendering the information that appear
        on hover box. Note that this will override `hoverinfo`. Variables are inserted
        using %{variable}, for example "y: %{y}" as well as %{xother}, {%_xother},
        {%_xother_}, {%xother_}. When showing info for several points, *xother* will
        be added to those with different x positions from the first point. An underscore
        before or after *(x|y)other* will add a space on that side, only when this
        field is shown. Numbers are formatted using d3-format''s syntax %{variable:d3-format},
        for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format
        for details on the formatting syntax. Dates are formatted using d3-time-format''s
        syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format
        for details on the date formatting syntax. The variables available in `hovertemplate`
        are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data.
        Additionally, every attributes that can be specified per-point (the ones that
        are `arrayOk: true`) are available. variables `value` and `label`. Anything
        contained in tag `<extra>` is displayed in the secondary box, for example
        "<extra>{fullData.name}</extra>". To hide the secondary box completely, use
        an empty tag `<extra></extra>`.'
      dflt: ''
      editType: calc
      valType: string
    hovertemplatesrc:
      description: Sets the source reference on Chart Studio Cloud for  hovertemplate
        .
      editType: none
      valType: string
    label:
      description: The shown name of the link.
      dflt: []
      editType: calc
      valType: data_array
    labelsrc:
      description: Sets the source reference on Chart Studio Cloud for  label .
      editType: none
      valType: string
    line:
      color:
        arrayOk: yes
        description: Sets the color of the `line` around each `link`.
        dflt: '#444'
        editType: calc
        valType: color
      colorsrc:
        description: Sets the source reference on Chart Studio Cloud for  color .
        editType: none
        valType: string
      editType: calc
      role: object
      width:
        arrayOk: yes
        description: Sets the width (in px) of the `line` around each `link`.
        dflt: 0
        editType: calc
        min: 0
        valType: number
      widthsrc:
        description: Sets the source reference on Chart Studio Cloud for  width .
        editType: none
        valType: string
    role: object
    source:
      description: An integer number `[0..nodes.length - 1]` that represents the source
        node.
      dflt: []
      editType: calc
      valType: data_array
    sourcesrc:
      description: Sets the source reference on Chart Studio Cloud for  source .
      editType: none
      valType: string
    target:
      description: An integer number `[0..nodes.length - 1]` that represents the target
        node.
      dflt: []
      editType: calc
      valType: data_array
    targetsrc:
      description: Sets the source reference on Chart Studio Cloud for  target .
      editType: none
      valType: string
    value:
      description: A numeric value representing the flow volume value.
      dflt: []
      editType: calc
      valType: data_array
    valuesrc:
      description: Sets the source reference on Chart Studio Cloud for  value .
      editType: none
      valType: string
  meta:
    arrayOk: yes
    description: Assigns extra meta information associated with this trace that can
      be used in various text attributes. Attributes such as trace `name`, graph,
      axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues`
      and `sliders` `label` text all support `meta`. To access the trace `meta` values
      in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the
      index or key of the `meta` item in question. To access trace `meta` in layout
      attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta`
      and `n` is the trace index.
    editType: plot
    valType: any
  metasrc:
    description: Sets the source reference on Chart Studio Cloud for  meta .
    editType: none
    valType: string
  name:
    description: Sets the trace name. The trace name appear as the legend item and
      on hover.
    editType: style
    valType: string
  node:
    color:
      arrayOk: yes
      description: Sets the `node` color. It can be a single value, or an array for
        specifying color for each `node`. If `node.color` is omitted, then the default
        `Plotly` color palette will be cycled through to have a variety of colors.
        These defaults are not fully opaque, to allow some visibility of what is beneath
        the node.
      editType: calc
      valType: color
    colorsrc:
      description: Sets the source reference on Chart Studio Cloud for  color .
      editType: none
      valType: string
    customdata:
      description: Assigns extra data to each node.
      editType: calc
      valType: data_array
    customdatasrc:
      description: Sets the source reference on Chart Studio Cloud for  customdata
        .
      editType: none
      valType: string
    description: The nodes of the Sankey plot.
    editType: calc
    groups:
      description: Groups of nodes. Each group is defined by an array with the indices
        of the nodes it contains. Multiple groups can be specified.
      dflt: []
      dimensions: 2
      editType: calc
      freeLength: yes
      impliedEdits:
        x: []
        'y': []
      items:
        editType: calc
        valType: number
      valType: info_array
    hoverinfo:
      description: Determines which trace information appear when hovering nodes.
        If `none` or `skip` are set, no information is displayed upon hovering. But,
        if `none` is set, click and hover events are still fired.
      dflt: all
      editType: calc
      valType: enumerated
      values:
      - all
      - none
      - skip
    hoverlabel:
      align:
        arrayOk: yes
        description: Sets the horizontal alignment of the text content within hover
          label box. Has an effect only if the hover label text spans more two or
          more lines
        dflt: auto
        editType: calc
        valType: enumerated
        values:
        - left
        - right
        - auto
      alignsrc:
        description: Sets the source reference on Chart Studio Cloud for  align .
        editType: none
        valType: string
      bgcolor:
        arrayOk: yes
        description: Sets the background color of the hover labels for this trace
        editType: calc
        valType: color
      bgcolorsrc:
        description: Sets the source reference on Chart Studio Cloud for  bgcolor
          .
        editType: none
        valType: string
      bordercolor:
        arrayOk: yes
        description: Sets the border color of the hover labels for this trace.
        editType: calc
        valType: color
      bordercolorsrc:
        description: Sets the source reference on Chart Studio Cloud for  bordercolor
          .
        editType: none
        valType: string
      editType: calc
      font:
        color:
          arrayOk: yes
          editType: calc
          valType: color
        colorsrc:
          description: Sets the source reference on Chart Studio Cloud for  color
            .
          editType: none
          valType: string
        description: Sets the font used in hover labels.
        editType: calc
        family:
          arrayOk: yes
          description: HTML font family - the typeface that will be applied by the
            web browser. The web browser will only be able to apply a font if it is
            available on the system which it operates. Provide multiple font families,
            separated by commas, to indicate the preference in which to apply fonts
            if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com
            or on-premise) generates images on a server, where only a select number
            of fonts are installed and supported. These include *Arial*, *Balto*,
            *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas
            One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*,
            *Times New Roman*.
          editType: calc
          noBlank: yes
          strict: yes
          valType: string
        familysrc:
          description: Sets the source reference on Chart Studio Cloud for  family
            .
          editType: none
          valType: string
        role: object
        size:
          arrayOk: yes
          editType: calc
          min: 1
          valType: number
        sizesrc:
          description: Sets the source reference on Chart Studio Cloud for  size .
          editType: none
          valType: string
      namelength:
        arrayOk: yes
        description: Sets the default length (in number of characters) of the trace
          name in the hover labels for all traces. -1 shows the whole name regardless
          of length. 0-3 shows the first 0-3 characters, and an integer >3 will show
          the whole name if it is less than that many characters, but if it is longer,
          will truncate to `namelength - 3` characters and add an ellipsis.
        dflt: 15
        editType: calc
        min: -1
        valType: integer
      namelengthsrc:
        description: Sets the source reference on Chart Studio Cloud for  namelength
          .
        editType: none
        valType: string
      role: object
    hovertemplate:
      arrayOk: yes
      description: 'Template string used for rendering the information that appear
        on hover box. Note that this will override `hoverinfo`. Variables are inserted
        using %{variable}, for example "y: %{y}" as well as %{xother}, {%_xother},
        {%_xother_}, {%xother_}. When showing info for several points, *xother* will
        be added to those with different x positions from the first point. An underscore
        before or after *(x|y)other* will add a space on that side, only when this
        field is shown. Numbers are formatted using d3-format''s syntax %{variable:d3-format},
        for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format
        for details on the formatting syntax. Dates are formatted using d3-time-format''s
        syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format
        for details on the date formatting syntax. The variables available in `hovertemplate`
        are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data.
        Additionally, every attributes that can be specified per-point (the ones that
        are `arrayOk: true`) are available. variables `value` and `label`. Anything
        contained in tag `<extra>` is displayed in the secondary box, for example
        "<extra>{fullData.name}</extra>". To hide the secondary box completely, use
        an empty tag `<extra></extra>`.'
      dflt: ''
      editType: calc
      valType: string
    hovertemplatesrc:
      description: Sets the source reference on Chart Studio Cloud for  hovertemplate
        .
      editType: none
      valType: string
    label:
      description: The shown name of the node.
      dflt: []
      editType: calc
      valType: data_array
    labelsrc:
      description: Sets the source reference on Chart Studio Cloud for  label .
      editType: none
      valType: string
    line:
      color:
        arrayOk: yes
        description: Sets the color of the `line` around each `node`.
        dflt: '#444'
        editType: calc
        valType: color
      colorsrc:
        description: Sets the source reference on Chart Studio Cloud for  color .
        editType: none
        valType: string
      editType: calc
      role: object
      width:
        arrayOk: yes
        description: Sets the width (in px) of the `line` around each `node`.
        dflt: 0.5
        editType: calc
        min: 0
        valType: number
      widthsrc:
        description: Sets the source reference on Chart Studio Cloud for  width .
        editType: none
        valType: string
    pad:
      arrayOk: no
      description: Sets the padding (in px) between the `nodes`.
      dflt: 20
      editType: calc
      min: 0
      valType: number
    role: object
    thickness:
      arrayOk: no
      description: Sets the thickness (in px) of the `nodes`.
      dflt: 20
      editType: calc
      min: 1
      valType: number
    x:
      description: The normalized horizontal position of the node.
      dflt: []
      editType: calc
      valType: data_array
    xsrc:
      description: Sets the source reference on Chart Studio Cloud for  x .
      editType: none
      valType: string
    'y':
      description: The normalized vertical position of the node.
      dflt: []
      editType: calc
      valType: data_array
    ysrc:
      description: Sets the source reference on Chart Studio Cloud for  y .
      editType: none
      valType: string
  orientation:
    description: Sets the orientation of the Sankey diagram.
    dflt: h
    editType: calc
    valType: enumerated
    values:
    - v
    - h
  selectedpoints:
    description: Array containing integer indices of selected points. Has an effect
      only for traces that support selections. Note that an empty array means an empty
      selection where the `unselected` are turned on for all points, whereas, any
      other non-array values means no selection all where the `selected` and `unselected`
      styles have no effect.
    editType: calc
    valType: any
  stream:
    editType: calc
    maxpoints:
      description: Sets the maximum number of points to keep on the plots from an
        incoming stream. If `maxpoints` is set to *50*, only the newest 50 points
        will be displayed on the plot.
      dflt: 500
      editType: calc
      max: 10000
      min: 0
      valType: number
    role: object
    token:
      description: The stream id number links a data trace on a plot with a stream.
        See https://chart-studio.plotly.com/settings for more details.
      editType: calc
      noBlank: yes
      strict: yes
      valType: string
  textfont:
    color:
      editType: calc
      valType: color
    description: Sets the font for node labels
    editType: calc
    family:
      description: HTML font family - the typeface that will be applied by the web
        browser. The web browser will only be able to apply a font if it is available
        on the system which it operates. Provide multiple font families, separated
        by commas, to indicate the preference in which to apply fonts if they aren't
        available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com
        or on-premise) generates images on a server, where only a select number of
        fonts are installed and supported. These include *Arial*, *Balto*, *Courier
        New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old
        Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times
        New Roman*.
      editType: calc
      noBlank: yes
      strict: yes
      valType: string
    role: object
    size:
      editType: calc
      min: 1
      valType: number
  type: sankey
  uid:
    description: Assign an id to this trace, Use this to provide object constancy
      between traces during animations and transitions.
    editType: plot
    valType: string
  uirevision:
    description: 'Controls persistence of some user-driven changes to the trace: `constraintrange`
      in `parcoords` traces, as well as some `editable: true` modifications such as
      `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other
      user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible`
      is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled
      by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config:
      {editable: true}`) is controlled by `layout.editrevision`. Trace changes are
      tracked by `uid`, which only falls back on trace index if no `uid` is provided.
      So if your app can add/remove traces before the end of the `data` array, such
      that the same trace has a different index, you can still preserve user-driven
      changes if you give each trace a `uid` that stays with it as it moves.'
    editType: none
    valType: any
  valueformat:
    description: 'Sets the value formatting rule using d3 formatting mini-languages
      which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format.'
    dflt: .3s
    editType: calc
    valType: string
  valuesuffix:
    description: Adds a unit to follow the value in the hover tooltip. Add a space
      if a separation is necessary from the value.
    dflt: ''
    editType: calc
    valType: string
  visible:
    description: Determines whether or not this trace is visible. If *legendonly*,
      the trace is not drawn, but can appear as a legend item (provided that the legend
      itself is visible).
    dflt: yes
    editType: calc
    valType: enumerated
    values:
    - 'TRUE'
    - 'FALSE'
    - legendonly
categories: noOpacity
meta:
  description: Sankey plots for network flow data analysis. The nodes are specified
    in `nodes` and the links between sources and targets in `links`. The colors are
    set in `nodes[i].color` and `links[i].color`, otherwise defaults are used.
type: sankey
