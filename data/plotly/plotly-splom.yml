animatable: no
attributes:
  customdata:
    description: Assigns extra data each datum. This may be useful when listening
      to hover, click and selection events. Note that, *scatter* traces also appends
      customdata items in the markers DOM elements
    editType: calc
    valType: data_array
  customdatasrc:
    description: Sets the source reference on Chart Studio Cloud for  customdata .
    editType: none
    valType: string
  diagonal:
    editType: calc
    role: object
    visible:
      description: Determines whether or not subplots on the diagonal are displayed.
      dflt: yes
      editType: calc
      valType: boolean
  dimensions:
    items:
      dimension:
        axis:
          editType: calc+clearAxisTypes
          matches:
            description: Determines whether or not the x & y axes generated by this
              dimension match. Equivalent to setting the `matches` axis attribute
              in the layout with the correct axis id.
            dflt: no
            editType: calc
            valType: boolean
          role: object
          type:
            description: Sets the axis type for this dimension's generated x and y
              axes. Note that the axis `type` values set in layout take precedence
              over this attribute.
            editType: calc+clearAxisTypes
            valType: enumerated
            values:
            - linear
            - log
            - date
            - category
        editType: calc+clearAxisTypes
        label:
          description: Sets the label corresponding to this splom dimension.
          editType: calc
          valType: string
        name:
          description: 'When used in a template, named items are created in the output
            figure in addition to any items the figure already has in this array.
            You can modify these items in the output figure by making your own item
            with `templateitemname` matching this `name` alongside your modifications
            (including `visible: false` or `enabled: false` to hide it). Has no effect
            outside of a template.'
          editType: none
          valType: string
        role: object
        templateitemname:
          description: 'Used to refer to a named item in this array in the template.
            Named items from the template will be created even without a matching
            item in the input figure, but you can modify one by making an item with
            `templateitemname` matching its `name`, alongside your modifications (including
            `visible: false` or `enabled: false` to hide it). If there is no template
            or no matching item, this item will be hidden unless you explicitly show
            it with `visible: true`.'
          editType: calc
          valType: string
        values:
          description: Sets the dimension values to be plotted.
          editType: calc+clearAxisTypes
          valType: data_array
        valuessrc:
          description: Sets the source reference on Chart Studio Cloud for  values
            .
          editType: none
          valType: string
        visible:
          description: Determines whether or not this dimension is shown on the graph.
            Note that even visible false dimension contribute to the default grid
            generate by this splom trace.
          dflt: yes
          editType: calc
          valType: boolean
    role: object
  hoverinfo:
    arrayOk: yes
    description: Determines which trace information appear on hover. If `none` or
      `skip` are set, no information is displayed upon hovering. But, if `none` is
      set, click and hover events are still fired.
    dflt: all
    editType: none
    extras:
    - all
    - none
    - skip
    flags:
    - x
    - 'y'
    - z
    - text
    - name
    valType: flaglist
  hoverinfosrc:
    description: Sets the source reference on Chart Studio Cloud for  hoverinfo .
    editType: none
    valType: string
  hoverlabel:
    align:
      arrayOk: yes
      description: Sets the horizontal alignment of the text content within hover
        label box. Has an effect only if the hover label text spans more two or more
        lines
      dflt: auto
      editType: none
      valType: enumerated
      values:
      - left
      - right
      - auto
    alignsrc:
      description: Sets the source reference on Chart Studio Cloud for  align .
      editType: none
      valType: string
    bgcolor:
      arrayOk: yes
      description: Sets the background color of the hover labels for this trace
      editType: none
      valType: color
    bgcolorsrc:
      description: Sets the source reference on Chart Studio Cloud for  bgcolor .
      editType: none
      valType: string
    bordercolor:
      arrayOk: yes
      description: Sets the border color of the hover labels for this trace.
      editType: none
      valType: color
    bordercolorsrc:
      description: Sets the source reference on Chart Studio Cloud for  bordercolor
        .
      editType: none
      valType: string
    editType: none
    font:
      color:
        arrayOk: yes
        editType: none
        valType: color
      colorsrc:
        description: Sets the source reference on Chart Studio Cloud for  color .
        editType: none
        valType: string
      description: Sets the font used in hover labels.
      editType: none
      family:
        arrayOk: yes
        description: HTML font family - the typeface that will be applied by the web
          browser. The web browser will only be able to apply a font if it is available
          on the system which it operates. Provide multiple font families, separated
          by commas, to indicate the preference in which to apply fonts if they aren't
          available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com
          or on-premise) generates images on a server, where only a select number
          of fonts are installed and supported. These include *Arial*, *Balto*, *Courier
          New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old
          Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times
          New Roman*.
        editType: none
        noBlank: yes
        strict: yes
        valType: string
      familysrc:
        description: Sets the source reference on Chart Studio Cloud for  family .
        editType: none
        valType: string
      role: object
      size:
        arrayOk: yes
        editType: none
        min: 1
        valType: number
      sizesrc:
        description: Sets the source reference on Chart Studio Cloud for  size .
        editType: none
        valType: string
    namelength:
      arrayOk: yes
      description: Sets the default length (in number of characters) of the trace
        name in the hover labels for all traces. -1 shows the whole name regardless
        of length. 0-3 shows the first 0-3 characters, and an integer >3 will show
        the whole name if it is less than that many characters, but if it is longer,
        will truncate to `namelength - 3` characters and add an ellipsis.
      dflt: 15
      editType: none
      min: -1
      valType: integer
    namelengthsrc:
      description: Sets the source reference on Chart Studio Cloud for  namelength
        .
      editType: none
      valType: string
    role: object
  hovertemplate:
    arrayOk: yes
    description: 'Template string used for rendering the information that appear on
      hover box. Note that this will override `hoverinfo`. Variables are inserted
      using %{variable}, for example "y: %{y}" as well as %{xother}, {%_xother}, {%_xother_},
      {%xother_}. When showing info for several points, *xother* will be added to
      those with different x positions from the first point. An underscore before
      or after *(x|y)other* will add a space on that side, only when this field is
      shown. Numbers are formatted using d3-format''s syntax %{variable:d3-format},
      for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format
      for details on the formatting syntax. Dates are formatted using d3-time-format''s
      syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format
      for details on the date formatting syntax. The variables available in `hovertemplate`
      are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data.
      Additionally, every attributes that can be specified per-point (the ones that
      are `arrayOk: true`) are available.  Anything contained in tag `<extra>` is
      displayed in the secondary box, for example "<extra>{fullData.name}</extra>".
      To hide the secondary box completely, use an empty tag `<extra></extra>`.'
    dflt: ''
    editType: none
    valType: string
  hovertemplatesrc:
    description: Sets the source reference on Chart Studio Cloud for  hovertemplate
      .
    editType: none
    valType: string
  hovertext:
    arrayOk: yes
    description: Same as `text`.
    dflt: ''
    editType: calc
    valType: string
  hovertextsrc:
    description: Sets the source reference on Chart Studio Cloud for  hovertext .
    editType: none
    valType: string
  ids:
    description: Assigns id labels to each datum. These ids for object constancy of
      data points during animation. Should be an array of strings, not numbers or
      any other type.
    editType: calc
    valType: data_array
  idssrc:
    description: Sets the source reference on Chart Studio Cloud for  ids .
    editType: none
    valType: string
  legendgroup:
    description: Sets the legend group for this trace. Traces part of the same legend
      group hide/show at the same time when toggling legend items.
    dflt: ''
    editType: style
    valType: string
  legendgrouptitle:
    editType: style
    font:
      color:
        editType: style
        valType: color
      description: Sets this legend group's title font.
      editType: style
      family:
        description: HTML font family - the typeface that will be applied by the web
          browser. The web browser will only be able to apply a font if it is available
          on the system which it operates. Provide multiple font families, separated
          by commas, to indicate the preference in which to apply fonts if they aren't
          available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com
          or on-premise) generates images on a server, where only a select number
          of fonts are installed and supported. These include *Arial*, *Balto*, *Courier
          New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old
          Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times
          New Roman*.
        editType: style
        noBlank: yes
        strict: yes
        valType: string
      role: object
      size:
        editType: style
        min: 1
        valType: number
    role: object
    text:
      description: Sets the title of the legend group.
      dflt: ''
      editType: style
      valType: string
  legendrank:
    description: Sets the legend rank for this trace. Items and groups with smaller
      ranks are presented on top/left side while with `*reversed* `legend.traceorder`
      they are on bottom/right side. The default legendrank is 1000, so that you can
      use ranks less than 1000 to place certain items before all unranked items, and
      ranks greater than 1000 to go after all unranked items.
    dflt: 1000
    editType: style
    valType: number
  marker:
    autocolorscale:
      description: 'Determines whether the colorscale is a default palette (`autocolorscale:
        true`) or the palette determined by `marker.colorscale`. Has an effect only
        if in `marker.color`is set to a numerical array. In case `colorscale` is unspecified
        or `autocolorscale` is true, the default  palette will be chosen according
        to whether numbers in the `color` array are all positive, all negative or
        mixed.'
      dflt: yes
      editType: calc
      impliedEdits: {}
      valType: boolean
    cauto:
      description: Determines whether or not the color domain is computed with respect
        to the input data (here in `marker.color`) or the bounds set in `marker.cmin`
        and `marker.cmax`  Has an effect only if in `marker.color`is set to a numerical
        array. Defaults to `false` when `marker.cmin` and `marker.cmax` are set by
        the user.
      dflt: yes
      editType: calc
      impliedEdits: {}
      valType: boolean
    cmax:
      description: Sets the upper bound of the color domain. Has an effect only if
        in `marker.color`is set to a numerical array. Value should have the same units
        as in `marker.color` and if set, `marker.cmin` must be set as well.
      dflt: ~
      editType: style
      impliedEdits:
        cauto: no
      valType: number
    cmid:
      description: Sets the mid-point of the color domain by scaling `marker.cmin`
        and/or `marker.cmax` to be equidistant to this point. Has an effect only if
        in `marker.color`is set to a numerical array. Value should have the same units
        as in `marker.color`. Has no effect when `marker.cauto` is `false`.
      dflt: ~
      editType: calc
      impliedEdits: {}
      valType: number
    cmin:
      description: Sets the lower bound of the color domain. Has an effect only if
        in `marker.color`is set to a numerical array. Value should have the same units
        as in `marker.color` and if set, `marker.cmax` must be set as well.
      dflt: ~
      editType: style
      impliedEdits:
        cauto: no
      valType: number
    color:
      arrayOk: yes
      description: Sets themarkercolor. It accepts either a specific color or an array
        of numbers that are mapped to the colorscale relative to the max and min values
        of the array or relative to `marker.cmin` and `marker.cmax` if set.
      editType: style
      valType: color
    coloraxis:
      description: Sets a reference to a shared color axis. References to these shared
        color axes are *coloraxis*, *coloraxis2*, *coloraxis3*, etc. Settings for
        these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`,
        etc. Note that multiple color scales can be linked to the same color axis.
      dflt: ~
      editType: calc
      regex: /^coloraxis([2-9]|[1-9][0-9]+)?$/
      valType: subplotid
    colorbar:
      _deprecated:
        title:
          description: Deprecated in favor of color bar's `title.text`. Note that
            value of color bar's `title` is no longer a simple *string* but a set
            of sub-attributes.
          editType: colorbars
          valType: string
        titlefont:
          color:
            editType: colorbars
            valType: color
          description: Deprecated in favor of color bar's `title.font`.
          editType: colorbars
          family:
            description: HTML font family - the typeface that will be applied by the
              web browser. The web browser will only be able to apply a font if it
              is available on the system which it operates. Provide multiple font
              families, separated by commas, to indicate the preference in which to
              apply fonts if they aren't available on the system. The Chart Studio
              Cloud (at https://chart-studio.plotly.com or on-premise) generates images
              on a server, where only a select number of fonts are installed and supported.
              These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid
              Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open
              Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
            editType: colorbars
            noBlank: yes
            strict: yes
            valType: string
          size:
            editType: colorbars
            min: 1
            valType: number
        titleside:
          description: Deprecated in favor of color bar's `title.side`.
          dflt: top
          editType: colorbars
          valType: enumerated
          values:
          - right
          - top
          - bottom
      bgcolor:
        description: Sets the color of padded area.
        dflt: rgba(0,0,0,0)
        editType: colorbars
        valType: color
      bordercolor:
        description: Sets the axis line color.
        dflt: '#444'
        editType: colorbars
        valType: color
      borderwidth:
        description: Sets the width (in px) or the border enclosing this color bar.
        dflt: 0
        editType: colorbars
        min: 0
        valType: number
      dtick:
        description: Sets the step in-between ticks on this axis. Use with `tick0`.
          Must be a positive number, or special strings available to *log* and *date*
          axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick)
          where n is the tick number. For example, to set a tick mark at 1, 10, 100,
          1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick
          to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5),
          or 0.69897000433. *log* has several special values; *L<f>*, where `f` is
          a positive number, gives ticks linearly spaced in value (but not position).
          For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6,
          1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all
          digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If
          the axis `type` is *date*, then you must convert the time to milliseconds.
          For example, to set the interval between ticks to one day, set `dtick` to
          86400000.0. *date* also has special values *M<n>* gives ticks spaced by
          a number of months. `n` must be a positive integer. To set ticks on the
          15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*.
          To set ticks every 4 years, set `dtick` to *M48*
        editType: colorbars
        impliedEdits:
          tickmode: linear
        valType: any
      editType: colorbars
      exponentformat:
        description: Determines a formatting rule for the tick exponents. For example,
          consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000.
          If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script).
          If *SI*, 1G. If *B*, 1B.
        dflt: B
        editType: colorbars
        valType: enumerated
        values:
        - none
        - e
        - E
        - power
        - SI
        - B
      len:
        description: Sets the length of the color bar This measure excludes the padding
          of both ends. That is, the color bar length is this length minus the padding
          on both ends.
        dflt: 1
        editType: colorbars
        min: 0
        valType: number
      lenmode:
        description: Determines whether this color bar's length (i.e. the measure
          in the color variation direction) is set in units of plot *fraction* or
          in *pixels. Use `len` to set the value.
        dflt: fraction
        editType: colorbars
        valType: enumerated
        values:
        - fraction
        - pixels
      minexponent:
        description: Hide SI prefix for 10^n if |n| is below this number. This only
          has an effect when `tickformat` is *SI* or *B*.
        dflt: 3
        editType: colorbars
        min: 0
        valType: number
      nticks:
        description: Specifies the maximum number of ticks for the particular axis.
          The actual number of ticks will be chosen automatically to be less than
          or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.
        dflt: 0
        editType: colorbars
        min: 0
        valType: integer
      outlinecolor:
        description: Sets the axis line color.
        dflt: '#444'
        editType: colorbars
        valType: color
      outlinewidth:
        description: Sets the width (in px) of the axis line.
        dflt: 1
        editType: colorbars
        min: 0
        valType: number
      role: object
      separatethousands:
        description: If "true", even 4-digit integers are separated
        dflt: no
        editType: colorbars
        valType: boolean
      showexponent:
        description: If *all*, all exponents are shown besides their significands.
          If *first*, only the exponent of the first tick is shown. If *last*, only
          the exponent of the last tick is shown. If *none*, no exponents appear.
        dflt: all
        editType: colorbars
        valType: enumerated
        values:
        - all
        - first
        - last
        - none
      showticklabels:
        description: Determines whether or not the tick labels are drawn.
        dflt: yes
        editType: colorbars
        valType: boolean
      showtickprefix:
        description: If *all*, all tick labels are displayed with a prefix. If *first*,
          only the first tick is displayed with a prefix. If *last*, only the last
          tick is displayed with a suffix. If *none*, tick prefixes are hidden.
        dflt: all
        editType: colorbars
        valType: enumerated
        values:
        - all
        - first
        - last
        - none
      showticksuffix:
        description: Same as `showtickprefix` but for tick suffixes.
        dflt: all
        editType: colorbars
        valType: enumerated
        values:
        - all
        - first
        - last
        - none
      thickness:
        description: Sets the thickness of the color bar This measure excludes the
          size of the padding, ticks and labels.
        dflt: 30
        editType: colorbars
        min: 0
        valType: number
      thicknessmode:
        description: Determines whether this color bar's thickness (i.e. the measure
          in the constant color direction) is set in units of plot *fraction* or in
          *pixels*. Use `thickness` to set the value.
        dflt: pixels
        editType: colorbars
        valType: enumerated
        values:
        - fraction
        - pixels
      tick0:
        description: Sets the placement of the first tick on this axis. Use with `dtick`.
          If the axis `type` is *log*, then you must take the log of your starting
          tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except
          when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*,
          it should be a date string, like date data. If the axis `type` is *category*,
          it should be a number, using the scale where each category is assigned a
          serial number from zero in the order it appears.
        editType: colorbars
        impliedEdits:
          tickmode: linear
        valType: any
      tickangle:
        description: Sets the angle of the tick labels with respect to the horizontal.
          For example, a `tickangle` of -90 draws the tick labels vertically.
        dflt: auto
        editType: colorbars
        valType: angle
      tickcolor:
        description: Sets the tick color.
        dflt: '#444'
        editType: colorbars
        valType: color
      tickfont:
        color:
          editType: colorbars
          valType: color
        description: Sets the color bar's tick label font
        editType: colorbars
        family:
          description: HTML font family - the typeface that will be applied by the
            web browser. The web browser will only be able to apply a font if it is
            available on the system which it operates. Provide multiple font families,
            separated by commas, to indicate the preference in which to apply fonts
            if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com
            or on-premise) generates images on a server, where only a select number
            of fonts are installed and supported. These include *Arial*, *Balto*,
            *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas
            One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*,
            *Times New Roman*.
          editType: colorbars
          noBlank: yes
          strict: yes
          valType: string
        role: object
        size:
          editType: colorbars
          min: 1
          valType: number
      tickformat:
        description: 'Sets the tick label formatting rule using d3 formatting mini-languages
          which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format.
          And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format.
          We add two items to d3''s date formatter: *%h* for half of the year as a
          decimal number as well as *%{n}f* for fractional seconds with n digits.
          For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would
          display *09~15~23.46*'
        dflt: ''
        editType: colorbars
        valType: string
      tickformatstops:
        items:
          tickformatstop:
            dtickrange:
              description: range [*min*, *max*], where *min*, *max* - dtick values
                which describe some zoom level, it is possible to omit *min* or *max*
                value by passing *null*
              editType: colorbars
              items:
                editType:
                - colorbars
                - colorbars
                valType:
                - any
                - any
              valType: info_array
            editType: colorbars
            enabled:
              description: Determines whether or not this stop is used. If `false`,
                this stop is ignored even within its `dtickrange`.
              dflt: yes
              editType: colorbars
              valType: boolean
            name:
              description: 'When used in a template, named items are created in the
                output figure in addition to any items the figure already has in this
                array. You can modify these items in the output figure by making your
                own item with `templateitemname` matching this `name` alongside your
                modifications (including `visible: false` or `enabled: false` to hide
                it). Has no effect outside of a template.'
              editType: colorbars
              valType: string
            role: object
            templateitemname:
              description: 'Used to refer to a named item in this array in the template.
                Named items from the template will be created even without a matching
                item in the input figure, but you can modify one by making an item
                with `templateitemname` matching its `name`, alongside your modifications
                (including `visible: false` or `enabled: false` to hide it). If there
                is no template or no matching item, this item will be hidden unless
                you explicitly show it with `visible: true`.'
              editType: colorbars
              valType: string
            value:
              description: string - dtickformat for described zoom level, the same
                as *tickformat*
              dflt: ''
              editType: colorbars
              valType: string
        role: object
      ticklabeloverflow:
        description: Determines how we handle tick labels that would overflow either
          the graph div or the domain of the axis. The default value for inside tick
          labels is *hide past domain*. In other cases the default is *hide past div*.
        editType: colorbars
        valType: enumerated
        values:
        - allow
        - hide past div
        - hide past domain
      ticklabelposition:
        description: Determines where tick labels are drawn.
        dflt: outside
        editType: colorbars
        valType: enumerated
        values:
        - outside
        - inside
        - outside top
        - inside top
        - outside bottom
        - inside bottom
      ticklen:
        description: Sets the tick length (in px).
        dflt: 5
        editType: colorbars
        min: 0
        valType: number
      tickmode:
        description: Sets the tick mode for this axis. If *auto*, the number of ticks
          is set via `nticks`. If *linear*, the placement of the ticks is determined
          by a starting position `tick0` and a tick step `dtick` (*linear* is the
          default value if `tick0` and `dtick` are provided). If *array*, the placement
          of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array*
          is the default value if `tickvals` is provided).
        editType: colorbars
        impliedEdits: {}
        valType: enumerated
        values:
        - auto
        - linear
        - array
      tickprefix:
        description: Sets a tick label prefix.
        dflt: ''
        editType: colorbars
        valType: string
      ticks:
        description: Determines whether ticks are drawn or not. If **, this axis'
          ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside
          (inside) the axis lines.
        dflt: ''
        editType: colorbars
        valType: enumerated
        values:
        - outside
        - inside
        - ''
      ticksuffix:
        description: Sets a tick label suffix.
        dflt: ''
        editType: colorbars
        valType: string
      ticktext:
        description: Sets the text displayed at the ticks position via `tickvals`.
          Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.
        editType: colorbars
        valType: data_array
      ticktextsrc:
        description: Sets the source reference on Chart Studio Cloud for  ticktext
          .
        editType: none
        valType: string
      tickvals:
        description: Sets the values at which ticks on this axis appear. Only has
          an effect if `tickmode` is set to *array*. Used with `ticktext`.
        editType: colorbars
        valType: data_array
      tickvalssrc:
        description: Sets the source reference on Chart Studio Cloud for  tickvals
          .
        editType: none
        valType: string
      tickwidth:
        description: Sets the tick width (in px).
        dflt: 1
        editType: colorbars
        min: 0
        valType: number
      title:
        editType: colorbars
        font:
          color:
            editType: colorbars
            valType: color
          description: Sets this color bar's title font. Note that the title's font
            used to be set by the now deprecated `titlefont` attribute.
          editType: colorbars
          family:
            description: HTML font family - the typeface that will be applied by the
              web browser. The web browser will only be able to apply a font if it
              is available on the system which it operates. Provide multiple font
              families, separated by commas, to indicate the preference in which to
              apply fonts if they aren't available on the system. The Chart Studio
              Cloud (at https://chart-studio.plotly.com or on-premise) generates images
              on a server, where only a select number of fonts are installed and supported.
              These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid
              Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open
              Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
            editType: colorbars
            noBlank: yes
            strict: yes
            valType: string
          role: object
          size:
            editType: colorbars
            min: 1
            valType: number
        role: object
        side:
          description: Determines the location of color bar's title with respect to
            the color bar. Note that the title's location used to be set by the now
            deprecated `titleside` attribute.
          dflt: top
          editType: colorbars
          valType: enumerated
          values:
          - right
          - top
          - bottom
        text:
          description: Sets the title of the color bar. Note that before the existence
            of `title.text`, the title's contents used to be defined as the `title`
            attribute itself. This behavior has been deprecated.
          editType: colorbars
          valType: string
      x:
        description: Sets the x position of the color bar (in plot fraction).
        dflt: 1.02
        editType: colorbars
        max: 3
        min: -2
        valType: number
      xanchor:
        description: Sets this color bar's horizontal position anchor. This anchor
          binds the `x` position to the *left*, *center* or *right* of the color bar.
        dflt: left
        editType: colorbars
        valType: enumerated
        values:
        - left
        - center
        - right
      xpad:
        description: Sets the amount of padding (in px) along the x direction.
        dflt: 10
        editType: colorbars
        min: 0
        valType: number
      'y':
        description: Sets the y position of the color bar (in plot fraction).
        dflt: 0.5
        editType: colorbars
        max: 3
        min: -2
        valType: number
      yanchor:
        description: Sets this color bar's vertical position anchor This anchor binds
          the `y` position to the *top*, *middle* or *bottom* of the color bar.
        dflt: middle
        editType: colorbars
        valType: enumerated
        values:
        - top
        - middle
        - bottom
      ypad:
        description: Sets the amount of padding (in px) along the y direction.
        dflt: 10
        editType: colorbars
        min: 0
        valType: number
    colorscale:
      description: 'Sets the colorscale. Has an effect only if in `marker.color`is
        set to a numerical array. The colorscale must be an array containing arrays
        mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color
        string. At minimum, a mapping for the lowest (0) and highest (1) values are
        required. For example, `[[0, ''rgb(0,0,255)''], [1, ''rgb(255,0,0)'']]`. To
        control the bounds of the colorscale in color space, use`marker.cmin` and
        `marker.cmax`. Alternatively, `colorscale` may be a palette name string of
        the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.'
      dflt: ~
      editType: calc
      impliedEdits:
        autocolorscale: no
      valType: colorscale
    colorsrc:
      description: Sets the source reference on Chart Studio Cloud for  color .
      editType: none
      valType: string
    editType: calc
    line:
      autocolorscale:
        description: 'Determines whether the colorscale is a default palette (`autocolorscale:
          true`) or the palette determined by `marker.line.colorscale`. Has an effect
          only if in `marker.line.color`is set to a numerical array. In case `colorscale`
          is unspecified or `autocolorscale` is true, the default  palette will be
          chosen according to whether numbers in the `color` array are all positive,
          all negative or mixed.'
        dflt: yes
        editType: calc
        impliedEdits: {}
        valType: boolean
      cauto:
        description: Determines whether or not the color domain is computed with respect
          to the input data (here in `marker.line.color`) or the bounds set in `marker.line.cmin`
          and `marker.line.cmax`  Has an effect only if in `marker.line.color`is set
          to a numerical array. Defaults to `false` when `marker.line.cmin` and `marker.line.cmax`
          are set by the user.
        dflt: yes
        editType: calc
        impliedEdits: {}
        valType: boolean
      cmax:
        description: Sets the upper bound of the color domain. Has an effect only
          if in `marker.line.color`is set to a numerical array. Value should have
          the same units as in `marker.line.color` and if set, `marker.line.cmin`
          must be set as well.
        dflt: ~
        editType: calc
        impliedEdits:
          cauto: no
        valType: number
      cmid:
        description: Sets the mid-point of the color domain by scaling `marker.line.cmin`
          and/or `marker.line.cmax` to be equidistant to this point. Has an effect
          only if in `marker.line.color`is set to a numerical array. Value should
          have the same units as in `marker.line.color`. Has no effect when `marker.line.cauto`
          is `false`.
        dflt: ~
        editType: calc
        impliedEdits: {}
        valType: number
      cmin:
        description: Sets the lower bound of the color domain. Has an effect only
          if in `marker.line.color`is set to a numerical array. Value should have
          the same units as in `marker.line.color` and if set, `marker.line.cmax`
          must be set as well.
        dflt: ~
        editType: calc
        impliedEdits:
          cauto: no
        valType: number
      color:
        arrayOk: yes
        description: Sets themarker.linecolor. It accepts either a specific color
          or an array of numbers that are mapped to the colorscale relative to the
          max and min values of the array or relative to `marker.line.cmin` and `marker.line.cmax`
          if set.
        editType: calc
        valType: color
      coloraxis:
        description: Sets a reference to a shared color axis. References to these
          shared color axes are *coloraxis*, *coloraxis2*, *coloraxis3*, etc. Settings
          for these shared color axes are set in the layout, under `layout.coloraxis`,
          `layout.coloraxis2`, etc. Note that multiple color scales can be linked
          to the same color axis.
        dflt: ~
        editType: calc
        regex: /^coloraxis([2-9]|[1-9][0-9]+)?$/
        valType: subplotid
      colorscale:
        description: 'Sets the colorscale. Has an effect only if in `marker.line.color`is
          set to a numerical array. The colorscale must be an array containing arrays
          mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color
          string. At minimum, a mapping for the lowest (0) and highest (1) values
          are required. For example, `[[0, ''rgb(0,0,255)''], [1, ''rgb(255,0,0)'']]`.
          To control the bounds of the colorscale in color space, use`marker.line.cmin`
          and `marker.line.cmax`. Alternatively, `colorscale` may be a palette name
          string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.'
        dflt: ~
        editType: calc
        impliedEdits:
          autocolorscale: no
        valType: colorscale
      colorsrc:
        description: Sets the source reference on Chart Studio Cloud for  color .
        editType: none
        valType: string
      editType: calc
      reversescale:
        description: Reverses the color mapping if true. Has an effect only if in
          `marker.line.color`is set to a numerical array. If true, `marker.line.cmin`
          will correspond to the last color in the array and `marker.line.cmax` will
          correspond to the first color.
        dflt: no
        editType: plot
        valType: boolean
      role: object
      width:
        arrayOk: yes
        description: Sets the width (in px) of the lines bounding the marker points.
        editType: calc
        min: 0
        valType: number
      widthsrc:
        description: Sets the source reference on Chart Studio Cloud for  width .
        editType: none
        valType: string
    opacity:
      arrayOk: yes
      description: Sets the marker opacity.
      editType: style
      max: 1
      min: 0
      valType: number
    opacitysrc:
      description: Sets the source reference on Chart Studio Cloud for  opacity .
      editType: none
      valType: string
    reversescale:
      description: Reverses the color mapping if true. Has an effect only if in `marker.color`is
        set to a numerical array. If true, `marker.cmin` will correspond to the last
        color in the array and `marker.cmax` will correspond to the first color.
      dflt: no
      editType: plot
      valType: boolean
    role: object
    showscale:
      description: Determines whether or not a colorbar is displayed for this trace.
        Has an effect only if in `marker.color`is set to a numerical array.
      dflt: no
      editType: calc
      valType: boolean
    size:
      arrayOk: yes
      description: Sets the marker size (in px).
      dflt: 6
      editType: markerSize
      min: 0
      valType: number
    sizemin:
      description: Has an effect only if `marker.size` is set to a numerical array.
        Sets the minimum size (in px) of the rendered marker points.
      dflt: 0
      editType: calc
      min: 0
      valType: number
    sizemode:
      description: Has an effect only if `marker.size` is set to a numerical array.
        Sets the rule for which the data in `size` is converted to pixels.
      dflt: diameter
      editType: calc
      valType: enumerated
      values:
      - diameter
      - area
    sizeref:
      description: Has an effect only if `marker.size` is set to a numerical array.
        Sets the scale factor used to determine the rendered size of marker points.
        Use with `sizemin` and `sizemode`.
      dflt: 1
      editType: calc
      valType: number
    sizesrc:
      description: Sets the source reference on Chart Studio Cloud for  size .
      editType: none
      valType: string
    symbol:
      arrayOk: yes
      description: Sets the marker symbol type. Adding 100 is equivalent to appending
        *-open* to a symbol name. Adding 200 is equivalent to appending *-dot* to
        a symbol name. Adding 300 is equivalent to appending *-open-dot* or *dot-open*
        to a symbol name.
      dflt: circle
      editType: style
      valType: enumerated
      values:
      - '0'
      - '0'
      - circle
      - '100'
      - '100'
      - circle-open
      - '200'
      - '200'
      - circle-dot
      - '300'
      - '300'
      - circle-open-dot
      - '1'
      - '1'
      - square
      - '101'
      - '101'
      - square-open
      - '201'
      - '201'
      - square-dot
      - '301'
      - '301'
      - square-open-dot
      - '2'
      - '2'
      - diamond
      - '102'
      - '102'
      - diamond-open
      - '202'
      - '202'
      - diamond-dot
      - '302'
      - '302'
      - diamond-open-dot
      - '3'
      - '3'
      - cross
      - '103'
      - '103'
      - cross-open
      - '203'
      - '203'
      - cross-dot
      - '303'
      - '303'
      - cross-open-dot
      - '4'
      - '4'
      - x
      - '104'
      - '104'
      - x-open
      - '204'
      - '204'
      - x-dot
      - '304'
      - '304'
      - x-open-dot
      - '5'
      - '5'
      - triangle-up
      - '105'
      - '105'
      - triangle-up-open
      - '205'
      - '205'
      - triangle-up-dot
      - '305'
      - '305'
      - triangle-up-open-dot
      - '6'
      - '6'
      - triangle-down
      - '106'
      - '106'
      - triangle-down-open
      - '206'
      - '206'
      - triangle-down-dot
      - '306'
      - '306'
      - triangle-down-open-dot
      - '7'
      - '7'
      - triangle-left
      - '107'
      - '107'
      - triangle-left-open
      - '207'
      - '207'
      - triangle-left-dot
      - '307'
      - '307'
      - triangle-left-open-dot
      - '8'
      - '8'
      - triangle-right
      - '108'
      - '108'
      - triangle-right-open
      - '208'
      - '208'
      - triangle-right-dot
      - '308'
      - '308'
      - triangle-right-open-dot
      - '9'
      - '9'
      - triangle-ne
      - '109'
      - '109'
      - triangle-ne-open
      - '209'
      - '209'
      - triangle-ne-dot
      - '309'
      - '309'
      - triangle-ne-open-dot
      - '10'
      - '10'
      - triangle-se
      - '110'
      - '110'
      - triangle-se-open
      - '210'
      - '210'
      - triangle-se-dot
      - '310'
      - '310'
      - triangle-se-open-dot
      - '11'
      - '11'
      - triangle-sw
      - '111'
      - '111'
      - triangle-sw-open
      - '211'
      - '211'
      - triangle-sw-dot
      - '311'
      - '311'
      - triangle-sw-open-dot
      - '12'
      - '12'
      - triangle-nw
      - '112'
      - '112'
      - triangle-nw-open
      - '212'
      - '212'
      - triangle-nw-dot
      - '312'
      - '312'
      - triangle-nw-open-dot
      - '13'
      - '13'
      - pentagon
      - '113'
      - '113'
      - pentagon-open
      - '213'
      - '213'
      - pentagon-dot
      - '313'
      - '313'
      - pentagon-open-dot
      - '14'
      - '14'
      - hexagon
      - '114'
      - '114'
      - hexagon-open
      - '214'
      - '214'
      - hexagon-dot
      - '314'
      - '314'
      - hexagon-open-dot
      - '15'
      - '15'
      - hexagon2
      - '115'
      - '115'
      - hexagon2-open
      - '215'
      - '215'
      - hexagon2-dot
      - '315'
      - '315'
      - hexagon2-open-dot
      - '16'
      - '16'
      - octagon
      - '116'
      - '116'
      - octagon-open
      - '216'
      - '216'
      - octagon-dot
      - '316'
      - '316'
      - octagon-open-dot
      - '17'
      - '17'
      - star
      - '117'
      - '117'
      - star-open
      - '217'
      - '217'
      - star-dot
      - '317'
      - '317'
      - star-open-dot
      - '18'
      - '18'
      - hexagram
      - '118'
      - '118'
      - hexagram-open
      - '218'
      - '218'
      - hexagram-dot
      - '318'
      - '318'
      - hexagram-open-dot
      - '19'
      - '19'
      - star-triangle-up
      - '119'
      - '119'
      - star-triangle-up-open
      - '219'
      - '219'
      - star-triangle-up-dot
      - '319'
      - '319'
      - star-triangle-up-open-dot
      - '20'
      - '20'
      - star-triangle-down
      - '120'
      - '120'
      - star-triangle-down-open
      - '220'
      - '220'
      - star-triangle-down-dot
      - '320'
      - '320'
      - star-triangle-down-open-dot
      - '21'
      - '21'
      - star-square
      - '121'
      - '121'
      - star-square-open
      - '221'
      - '221'
      - star-square-dot
      - '321'
      - '321'
      - star-square-open-dot
      - '22'
      - '22'
      - star-diamond
      - '122'
      - '122'
      - star-diamond-open
      - '222'
      - '222'
      - star-diamond-dot
      - '322'
      - '322'
      - star-diamond-open-dot
      - '23'
      - '23'
      - diamond-tall
      - '123'
      - '123'
      - diamond-tall-open
      - '223'
      - '223'
      - diamond-tall-dot
      - '323'
      - '323'
      - diamond-tall-open-dot
      - '24'
      - '24'
      - diamond-wide
      - '124'
      - '124'
      - diamond-wide-open
      - '224'
      - '224'
      - diamond-wide-dot
      - '324'
      - '324'
      - diamond-wide-open-dot
      - '25'
      - '25'
      - hourglass
      - '125'
      - '125'
      - hourglass-open
      - '26'
      - '26'
      - bowtie
      - '126'
      - '126'
      - bowtie-open
      - '27'
      - '27'
      - circle-cross
      - '127'
      - '127'
      - circle-cross-open
      - '28'
      - '28'
      - circle-x
      - '128'
      - '128'
      - circle-x-open
      - '29'
      - '29'
      - square-cross
      - '129'
      - '129'
      - square-cross-open
      - '30'
      - '30'
      - square-x
      - '130'
      - '130'
      - square-x-open
      - '31'
      - '31'
      - diamond-cross
      - '131'
      - '131'
      - diamond-cross-open
      - '32'
      - '32'
      - diamond-x
      - '132'
      - '132'
      - diamond-x-open
      - '33'
      - '33'
      - cross-thin
      - '133'
      - '133'
      - cross-thin-open
      - '34'
      - '34'
      - x-thin
      - '134'
      - '134'
      - x-thin-open
      - '35'
      - '35'
      - asterisk
      - '135'
      - '135'
      - asterisk-open
      - '36'
      - '36'
      - hash
      - '136'
      - '136'
      - hash-open
      - '236'
      - '236'
      - hash-dot
      - '336'
      - '336'
      - hash-open-dot
      - '37'
      - '37'
      - y-up
      - '137'
      - '137'
      - y-up-open
      - '38'
      - '38'
      - y-down
      - '138'
      - '138'
      - y-down-open
      - '39'
      - '39'
      - y-left
      - '139'
      - '139'
      - y-left-open
      - '40'
      - '40'
      - y-right
      - '140'
      - '140'
      - y-right-open
      - '41'
      - '41'
      - line-ew
      - '141'
      - '141'
      - line-ew-open
      - '42'
      - '42'
      - line-ns
      - '142'
      - '142'
      - line-ns-open
      - '43'
      - '43'
      - line-ne
      - '143'
      - '143'
      - line-ne-open
      - '44'
      - '44'
      - line-nw
      - '144'
      - '144'
      - line-nw-open
      - '45'
      - '45'
      - arrow-up
      - '145'
      - '145'
      - arrow-up-open
      - '46'
      - '46'
      - arrow-down
      - '146'
      - '146'
      - arrow-down-open
      - '47'
      - '47'
      - arrow-left
      - '147'
      - '147'
      - arrow-left-open
      - '48'
      - '48'
      - arrow-right
      - '148'
      - '148'
      - arrow-right-open
      - '49'
      - '49'
      - arrow-bar-up
      - '149'
      - '149'
      - arrow-bar-up-open
      - '50'
      - '50'
      - arrow-bar-down
      - '150'
      - '150'
      - arrow-bar-down-open
      - '51'
      - '51'
      - arrow-bar-left
      - '151'
      - '151'
      - arrow-bar-left-open
      - '52'
      - '52'
      - arrow-bar-right
      - '152'
      - '152'
      - arrow-bar-right-open
    symbolsrc:
      description: Sets the source reference on Chart Studio Cloud for  symbol .
      editType: none
      valType: string
  meta:
    arrayOk: yes
    description: Assigns extra meta information associated with this trace that can
      be used in various text attributes. Attributes such as trace `name`, graph,
      axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues`
      and `sliders` `label` text all support `meta`. To access the trace `meta` values
      in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the
      index or key of the `meta` item in question. To access trace `meta` in layout
      attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta`
      and `n` is the trace index.
    editType: plot
    valType: any
  metasrc:
    description: Sets the source reference on Chart Studio Cloud for  meta .
    editType: none
    valType: string
  name:
    description: Sets the trace name. The trace name appear as the legend item and
      on hover.
    editType: style
    valType: string
  opacity:
    description: Sets the opacity of the trace.
    dflt: 1
    editType: calc
    max: 1
    min: 0
    valType: number
  selected:
    editType: calc
    marker:
      color:
        description: Sets the marker color of selected points.
        editType: calc
        valType: color
      editType: calc
      opacity:
        description: Sets the marker opacity of selected points.
        editType: calc
        max: 1
        min: 0
        valType: number
      role: object
      size:
        description: Sets the marker size of selected points.
        editType: calc
        min: 0
        valType: number
    role: object
  selectedpoints:
    description: Array containing integer indices of selected points. Has an effect
      only for traces that support selections. Note that an empty array means an empty
      selection where the `unselected` are turned on for all points, whereas, any
      other non-array values means no selection all where the `selected` and `unselected`
      styles have no effect.
    editType: calc
    valType: any
  showlegend:
    description: Determines whether or not an item corresponding to this trace is
      shown in the legend.
    dflt: yes
    editType: style
    valType: boolean
  showlowerhalf:
    description: Determines whether or not subplots on the lower half from the diagonal
      are displayed.
    dflt: yes
    editType: calc
    valType: boolean
  showupperhalf:
    description: Determines whether or not subplots on the upper half from the diagonal
      are displayed.
    dflt: yes
    editType: calc
    valType: boolean
  stream:
    editType: calc
    maxpoints:
      description: Sets the maximum number of points to keep on the plots from an
        incoming stream. If `maxpoints` is set to *50*, only the newest 50 points
        will be displayed on the plot.
      dflt: 500
      editType: calc
      max: 10000
      min: 0
      valType: number
    role: object
    token:
      description: The stream id number links a data trace on a plot with a stream.
        See https://chart-studio.plotly.com/settings for more details.
      editType: calc
      noBlank: yes
      strict: yes
      valType: string
  text:
    arrayOk: yes
    description: Sets text elements associated with each (x,y) pair to appear on hover.
      If a single string, the same string appears over all the data points. If an
      array of string, the items are mapped in order to the this trace's (x,y) coordinates.
    dflt: ''
    editType: calc
    valType: string
  textsrc:
    description: Sets the source reference on Chart Studio Cloud for  text .
    editType: none
    valType: string
  transforms:
    items:
      transform:
        description: 'WARNING: All transforms are deprecated and may be removed from
          the API in next major version. An array of operations that manipulate the
          trace data, for example filtering or sorting the data arrays.'
        editType: calc
        role: object
    role: object
  type: splom
  uid:
    description: Assign an id to this trace, Use this to provide object constancy
      between traces during animations and transitions.
    editType: plot
    valType: string
  uirevision:
    description: 'Controls persistence of some user-driven changes to the trace: `constraintrange`
      in `parcoords` traces, as well as some `editable: true` modifications such as
      `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other
      user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible`
      is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled
      by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config:
      {editable: true}`) is controlled by `layout.editrevision`. Trace changes are
      tracked by `uid`, which only falls back on trace index if no `uid` is provided.
      So if your app can add/remove traces before the end of the `data` array, such
      that the same trace has a different index, you can still preserve user-driven
      changes if you give each trace a `uid` that stays with it as it moves.'
    editType: none
    valType: any
  unselected:
    editType: calc
    marker:
      color:
        description: Sets the marker color of unselected points, applied only when
          a selection exists.
        editType: calc
        valType: color
      editType: calc
      opacity:
        description: Sets the marker opacity of unselected points, applied only when
          a selection exists.
        editType: calc
        max: 1
        min: 0
        valType: number
      role: object
      size:
        description: Sets the marker size of unselected points, applied only when
          a selection exists.
        editType: calc
        min: 0
        valType: number
    role: object
  visible:
    description: Determines whether or not this trace is visible. If *legendonly*,
      the trace is not drawn, but can appear as a legend item (provided that the legend
      itself is visible).
    dflt: yes
    editType: calc
    valType: enumerated
    values:
    - 'TRUE'
    - 'FALSE'
    - legendonly
  xaxes:
    description: Sets the list of x axes corresponding to dimensions of this splom
      trace. By default, a splom will match the first N xaxes where N is the number
      of input dimensions. Note that, in case where `diagonal.visible` is false and
      `showupperhalf` or `showlowerhalf` is false, this splom trace will generate
      one less x-axis and one less y-axis.
    editType: calc
    freeLength: yes
    items:
      editType: plot
      regex: /^x([2-9]|[1-9][0-9]+)?( domain)?$/
      valType: subplotid
    valType: info_array
  xhoverformat:
    description: 'Sets the hover text formatting rulefor `x`  using d3 formatting
      mini-languages which are very similar to those in Python. For numbers, see:
      https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format.
      We add two items to d3''s date formatter: *%h* for half of the year as a decimal
      number as well as *%{n}f* for fractional seconds with n digits. For example,
      *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*By
      default the values are formatted using `xaxis.hoverformat`.'
    dflt: ''
    editType: none
    valType: string
  yaxes:
    description: Sets the list of y axes corresponding to dimensions of this splom
      trace. By default, a splom will match the first N yaxes where N is the number
      of input dimensions. Note that, in case where `diagonal.visible` is false and
      `showupperhalf` or `showlowerhalf` is false, this splom trace will generate
      one less x-axis and one less y-axis.
    editType: calc
    freeLength: yes
    items:
      editType: plot
      regex: /^y([2-9]|[1-9][0-9]+)?( domain)?$/
      valType: subplotid
    valType: info_array
  yhoverformat:
    description: 'Sets the hover text formatting rulefor `y`  using d3 formatting
      mini-languages which are very similar to those in Python. For numbers, see:
      https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format.
      We add two items to d3''s date formatter: *%h* for half of the year as a decimal
      number as well as *%{n}f* for fractional seconds with n digits. For example,
      *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*By
      default the values are formatted using `yaxis.hoverformat`.'
    dflt: ''
    editType: none
    valType: string
categories:
- gl
- regl
- cartesian
- symbols
- showLegend
- scatter-like
meta:
  description: 'Splom traces generate scatter plot matrix visualizations. Each splom
    `dimensions` items correspond to a generated axis. Values for each of those dimensions
    are set in `dimensions[i].values`. Splom traces support all `scattergl` marker
    style attributes. Specify `layout.grid` attributes and/or layout x-axis and y-axis
    attributes for more control over the axis positioning and style. '
type: splom
