animatable: yes
attributes:
  a:
    description: An array containing values of the first parameter value
    editType: calc
    valType: data_array
  a0:
    description: Alternate to `a`. Builds a linear space of a coordinates. Use with
      `da` where `a0` is the starting coordinate and `da` the step.
    dflt: 0
    editType: calc
    valType: number
  aaxis:
    _deprecated:
      title:
        description: Deprecated in favor of `title.text`. Note that value of `title`
          is no longer a simple *string* but a set of sub-attributes.
        editType: calc
        valType: string
      titlefont:
        color:
          editType: calc
          valType: color
        description: Deprecated in favor of `title.font`.
        editType: calc
        family:
          description: HTML font family - the typeface that will be applied by the
            web browser. The web browser will only be able to apply a font if it is
            available on the system which it operates. Provide multiple font families,
            separated by commas, to indicate the preference in which to apply fonts
            if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com
            or on-premise) generates images on a server, where only a select number
            of fonts are installed and supported. These include *Arial*, *Balto*,
            *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas
            One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*,
            *Times New Roman*.
          editType: calc
          noBlank: yes
          strict: yes
          valType: string
        size:
          editType: calc
          min: 1
          valType: number
      titleoffset:
        description: Deprecated in favor of `title.offset`.
        dflt: 10
        editType: calc
        valType: number
    arraydtick:
      description: The stride between grid lines along the axis
      dflt: 1
      editType: calc
      min: 1
      valType: integer
    arraytick0:
      description: The starting index of grid lines along the axis
      dflt: 0
      editType: calc
      min: 0
      valType: integer
    autorange:
      description: Determines whether or not the range of this axis is computed in
        relation to the input data. See `rangemode` for more info. If `range` is provided,
        then `autorange` is set to *false*.
      dflt: yes
      editType: calc
      valType: enumerated
      values:
      - 'TRUE'
      - 'FALSE'
      - reversed
    autotypenumbers:
      description: Using *strict* a numeric string in trace data is not converted
        to a number. Using *convert types* a numeric string in trace data may be treated
        as a number during automatic axis `type` detection. Defaults to layout.autotypenumbers.
      dflt: convert types
      editType: calc
      valType: enumerated
      values:
      - convert types
      - strict
    categoryarray:
      description: Sets the order in which categories on this axis appear. Only has
        an effect if `categoryorder` is set to *array*. Used with `categoryorder`.
      editType: calc
      valType: data_array
    categoryarraysrc:
      description: Sets the source reference on Chart Studio Cloud for  categoryarray
        .
      editType: none
      valType: string
    categoryorder:
      description: Specifies the ordering logic for the case of categorical variables.
        By default, plotly uses *trace*, which specifies the order that is present
        in the data supplied. Set `categoryorder` to *category ascending* or *category
        descending* if order should be determined by the alphanumerical order of the
        category names. Set `categoryorder` to *array* to derive the ordering from
        the attribute `categoryarray`. If a category is not found in the `categoryarray`
        array, the sorting behavior for that attribute will be identical to the *trace*
        mode. The unspecified categories will follow the categories in `categoryarray`.
      dflt: trace
      editType: calc
      valType: enumerated
      values:
      - trace
      - category ascending
      - category descending
      - array
    cheatertype:
      dflt: value
      editType: calc
      valType: enumerated
      values:
      - index
      - value
    color:
      description: 'Sets default for all colors associated with this axis all at once:
        line, font, tick, and grid colors. Grid color is lightened by blending this
        with the plot background Individual pieces can override this.'
      editType: calc
      valType: color
    dtick:
      description: The stride between grid lines along the axis
      dflt: 1
      editType: calc
      min: 0
      valType: number
    editType: calc
    endline:
      description: Determines whether or not a line is drawn at along the final value
        of this axis. If *true*, the end line is drawn on top of the grid lines.
      editType: calc
      valType: boolean
    endlinecolor:
      description: Sets the line color of the end line.
      editType: calc
      valType: color
    endlinewidth:
      description: Sets the width (in px) of the end line.
      dflt: 1
      editType: calc
      valType: number
    exponentformat:
      description: Determines a formatting rule for the tick exponents. For example,
        consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000.
        If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script).
        If *SI*, 1G. If *B*, 1B.
      dflt: B
      editType: calc
      valType: enumerated
      values:
      - none
      - e
      - E
      - power
      - SI
      - B
    fixedrange:
      description: Determines whether or not this axis is zoom-able. If true, then
        zoom is disabled.
      dflt: no
      editType: calc
      valType: boolean
    gridcolor:
      description: Sets the axis line color.
      editType: calc
      valType: color
    gridwidth:
      description: Sets the width (in px) of the axis line.
      dflt: 1
      editType: calc
      min: 0
      valType: number
    labelpadding:
      description: Extra padding between label and the axis
      dflt: 10
      editType: calc
      valType: integer
    labelprefix:
      description: Sets a axis label prefix.
      editType: calc
      valType: string
    labelsuffix:
      description: Sets a axis label suffix.
      dflt: ''
      editType: calc
      valType: string
    linecolor:
      description: Sets the axis line color.
      dflt: '#444'
      editType: calc
      valType: color
    linewidth:
      description: Sets the width (in px) of the axis line.
      dflt: 1
      editType: calc
      min: 0
      valType: number
    minexponent:
      description: Hide SI prefix for 10^n if |n| is below this number
      dflt: 3
      editType: calc
      min: 0
      valType: number
    minorgridcolor:
      description: Sets the color of the grid lines.
      dflt: '#eee'
      editType: calc
      valType: color
    minorgridcount:
      description: Sets the number of minor grid ticks per major grid tick
      dflt: 0
      editType: calc
      min: 0
      valType: integer
    minorgridwidth:
      description: Sets the width (in px) of the grid lines.
      dflt: 1
      editType: calc
      min: 0
      valType: number
    nticks:
      description: Specifies the maximum number of ticks for the particular axis.
        The actual number of ticks will be chosen automatically to be less than or
        equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.
      dflt: 0
      editType: calc
      min: 0
      valType: integer
    range:
      description: Sets the range of this axis. If the axis `type` is *log*, then
        you must take the log of your desired range (e.g. to set the range from 1
        to 100, set the range from 0 to 2). If the axis `type` is *date*, it should
        be date strings, like date data, though Date objects and unix milliseconds
        will be accepted and converted to strings. If the axis `type` is *category*,
        it should be numbers, using the scale where each category is assigned a serial
        number from zero in the order it appears.
      editType: calc
      items:
        editType:
        - calc
        - calc
        valType:
        - any
        - any
      valType: info_array
    rangemode:
      description: If *normal*, the range is computed in relation to the extrema of
        the input data. If *tozero*`, the range extends to 0, regardless of the input
        data If *nonnegative*, the range is non-negative, regardless of the input
        data.
      dflt: normal
      editType: calc
      valType: enumerated
      values:
      - normal
      - tozero
      - nonnegative
    role: object
    separatethousands:
      description: If "true", even 4-digit integers are separated
      dflt: no
      editType: calc
      valType: boolean
    showexponent:
      description: If *all*, all exponents are shown besides their significands. If
        *first*, only the exponent of the first tick is shown. If *last*, only the
        exponent of the last tick is shown. If *none*, no exponents appear.
      dflt: all
      editType: calc
      valType: enumerated
      values:
      - all
      - first
      - last
      - none
    showgrid:
      description: Determines whether or not grid lines are drawn. If *true*, the
        grid lines are drawn at every tick mark.
      dflt: yes
      editType: calc
      valType: boolean
    showline:
      description: Determines whether or not a line bounding this axis is drawn.
      dflt: no
      editType: calc
      valType: boolean
    showticklabels:
      description: Determines whether axis labels are drawn on the low side, the high
        side, both, or neither side of the axis.
      dflt: start
      editType: calc
      valType: enumerated
      values:
      - start
      - end
      - both
      - none
    showtickprefix:
      description: If *all*, all tick labels are displayed with a prefix. If *first*,
        only the first tick is displayed with a prefix. If *last*, only the last tick
        is displayed with a suffix. If *none*, tick prefixes are hidden.
      dflt: all
      editType: calc
      valType: enumerated
      values:
      - all
      - first
      - last
      - none
    showticksuffix:
      description: Same as `showtickprefix` but for tick suffixes.
      dflt: all
      editType: calc
      valType: enumerated
      values:
      - all
      - first
      - last
      - none
    smoothing:
      dflt: 1
      editType: calc
      max: 1.3
      min: 0
      valType: number
    startline:
      description: Determines whether or not a line is drawn at along the starting
        value of this axis. If *true*, the start line is drawn on top of the grid
        lines.
      editType: calc
      valType: boolean
    startlinecolor:
      description: Sets the line color of the start line.
      editType: calc
      valType: color
    startlinewidth:
      description: Sets the width (in px) of the start line.
      dflt: 1
      editType: calc
      valType: number
    tick0:
      description: The starting index of grid lines along the axis
      dflt: 0
      editType: calc
      min: 0
      valType: number
    tickangle:
      description: Sets the angle of the tick labels with respect to the horizontal.
        For example, a `tickangle` of -90 draws the tick labels vertically.
      dflt: auto
      editType: calc
      valType: angle
    tickfont:
      color:
        editType: calc
        valType: color
      description: Sets the tick font.
      editType: calc
      family:
        description: HTML font family - the typeface that will be applied by the web
          browser. The web browser will only be able to apply a font if it is available
          on the system which it operates. Provide multiple font families, separated
          by commas, to indicate the preference in which to apply fonts if they aren't
          available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com
          or on-premise) generates images on a server, where only a select number
          of fonts are installed and supported. These include *Arial*, *Balto*, *Courier
          New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old
          Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times
          New Roman*.
        editType: calc
        noBlank: yes
        strict: yes
        valType: string
      role: object
      size:
        editType: calc
        min: 1
        valType: number
    tickformat:
      description: 'Sets the tick label formatting rule using d3 formatting mini-languages
        which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format.
        And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format.
        We add two items to d3''s date formatter: *%h* for half of the year as a decimal
        number as well as *%{n}f* for fractional seconds with n digits. For example,
        *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*'
      dflt: ''
      editType: calc
      valType: string
    tickformatstops:
      items:
        tickformatstop:
          dtickrange:
            description: range [*min*, *max*], where *min*, *max* - dtick values which
              describe some zoom level, it is possible to omit *min* or *max* value
              by passing *null*
            editType: calc
            items:
              editType:
              - calc
              - calc
              valType:
              - any
              - any
            valType: info_array
          editType: calc
          enabled:
            description: Determines whether or not this stop is used. If `false`,
              this stop is ignored even within its `dtickrange`.
            dflt: yes
            editType: calc
            valType: boolean
          name:
            description: 'When used in a template, named items are created in the
              output figure in addition to any items the figure already has in this
              array. You can modify these items in the output figure by making your
              own item with `templateitemname` matching this `name` alongside your
              modifications (including `visible: false` or `enabled: false` to hide
              it). Has no effect outside of a template.'
            editType: calc
            valType: string
          role: object
          templateitemname:
            description: 'Used to refer to a named item in this array in the template.
              Named items from the template will be created even without a matching
              item in the input figure, but you can modify one by making an item with
              `templateitemname` matching its `name`, alongside your modifications
              (including `visible: false` or `enabled: false` to hide it). If there
              is no template or no matching item, this item will be hidden unless
              you explicitly show it with `visible: true`.'
            editType: calc
            valType: string
          value:
            description: string - dtickformat for described zoom level, the same as
              *tickformat*
            dflt: ''
            editType: calc
            valType: string
      role: object
    tickmode:
      dflt: array
      editType: calc
      valType: enumerated
      values:
      - linear
      - array
    tickprefix:
      description: Sets a tick label prefix.
      dflt: ''
      editType: calc
      valType: string
    ticksuffix:
      description: Sets a tick label suffix.
      dflt: ''
      editType: calc
      valType: string
    ticktext:
      description: Sets the text displayed at the ticks position via `tickvals`. Only
        has an effect if `tickmode` is set to *array*. Used with `tickvals`.
      editType: calc
      valType: data_array
    ticktextsrc:
      description: Sets the source reference on Chart Studio Cloud for  ticktext .
      editType: none
      valType: string
    tickvals:
      description: Sets the values at which ticks on this axis appear. Only has an
        effect if `tickmode` is set to *array*. Used with `ticktext`.
      editType: calc
      valType: data_array
    tickvalssrc:
      description: Sets the source reference on Chart Studio Cloud for  tickvals .
      editType: none
      valType: string
    title:
      editType: calc
      font:
        color:
          editType: calc
          valType: color
        description: Sets this axis' title font. Note that the title's font used to
          be set by the now deprecated `titlefont` attribute.
        editType: calc
        family:
          description: HTML font family - the typeface that will be applied by the
            web browser. The web browser will only be able to apply a font if it is
            available on the system which it operates. Provide multiple font families,
            separated by commas, to indicate the preference in which to apply fonts
            if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com
            or on-premise) generates images on a server, where only a select number
            of fonts are installed and supported. These include *Arial*, *Balto*,
            *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas
            One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*,
            *Times New Roman*.
          editType: calc
          noBlank: yes
          strict: yes
          valType: string
        role: object
        size:
          editType: calc
          min: 1
          valType: number
      offset:
        description: An additional amount by which to offset the title from the tick
          labels, given in pixels. Note that this used to be set by the now deprecated
          `titleoffset` attribute.
        dflt: 10
        editType: calc
        valType: number
      role: object
      text:
        description: Sets the title of this axis. Note that before the existence of
          `title.text`, the title's contents used to be defined as the `title` attribute
          itself. This behavior has been deprecated.
        dflt: ''
        editType: calc
        valType: string
    type:
      description: Sets the axis type. By default, plotly attempts to determined the
        axis type by looking into the data of the traces that referenced the axis
        in question.
      dflt: '-'
      editType: calc
      valType: enumerated
      values:
      - '-'
      - linear
      - date
      - category
  asrc:
    description: Sets the source reference on Chart Studio Cloud for  a .
    editType: none
    valType: string
  b:
    description: A two dimensional array of y coordinates at each carpet point.
    editType: calc
    valType: data_array
  b0:
    description: Alternate to `b`. Builds a linear space of a coordinates. Use with
      `db` where `b0` is the starting coordinate and `db` the step.
    dflt: 0
    editType: calc
    valType: number
  baxis:
    _deprecated:
      title:
        description: Deprecated in favor of `title.text`. Note that value of `title`
          is no longer a simple *string* but a set of sub-attributes.
        editType: calc
        valType: string
      titlefont:
        color:
          editType: calc
          valType: color
        description: Deprecated in favor of `title.font`.
        editType: calc
        family:
          description: HTML font family - the typeface that will be applied by the
            web browser. The web browser will only be able to apply a font if it is
            available on the system which it operates. Provide multiple font families,
            separated by commas, to indicate the preference in which to apply fonts
            if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com
            or on-premise) generates images on a server, where only a select number
            of fonts are installed and supported. These include *Arial*, *Balto*,
            *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas
            One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*,
            *Times New Roman*.
          editType: calc
          noBlank: yes
          strict: yes
          valType: string
        size:
          editType: calc
          min: 1
          valType: number
      titleoffset:
        description: Deprecated in favor of `title.offset`.
        dflt: 10
        editType: calc
        valType: number
    arraydtick:
      description: The stride between grid lines along the axis
      dflt: 1
      editType: calc
      min: 1
      valType: integer
    arraytick0:
      description: The starting index of grid lines along the axis
      dflt: 0
      editType: calc
      min: 0
      valType: integer
    autorange:
      description: Determines whether or not the range of this axis is computed in
        relation to the input data. See `rangemode` for more info. If `range` is provided,
        then `autorange` is set to *false*.
      dflt: yes
      editType: calc
      valType: enumerated
      values:
      - 'TRUE'
      - 'FALSE'
      - reversed
    autotypenumbers:
      description: Using *strict* a numeric string in trace data is not converted
        to a number. Using *convert types* a numeric string in trace data may be treated
        as a number during automatic axis `type` detection. Defaults to layout.autotypenumbers.
      dflt: convert types
      editType: calc
      valType: enumerated
      values:
      - convert types
      - strict
    categoryarray:
      description: Sets the order in which categories on this axis appear. Only has
        an effect if `categoryorder` is set to *array*. Used with `categoryorder`.
      editType: calc
      valType: data_array
    categoryarraysrc:
      description: Sets the source reference on Chart Studio Cloud for  categoryarray
        .
      editType: none
      valType: string
    categoryorder:
      description: Specifies the ordering logic for the case of categorical variables.
        By default, plotly uses *trace*, which specifies the order that is present
        in the data supplied. Set `categoryorder` to *category ascending* or *category
        descending* if order should be determined by the alphanumerical order of the
        category names. Set `categoryorder` to *array* to derive the ordering from
        the attribute `categoryarray`. If a category is not found in the `categoryarray`
        array, the sorting behavior for that attribute will be identical to the *trace*
        mode. The unspecified categories will follow the categories in `categoryarray`.
      dflt: trace
      editType: calc
      valType: enumerated
      values:
      - trace
      - category ascending
      - category descending
      - array
    cheatertype:
      dflt: value
      editType: calc
      valType: enumerated
      values:
      - index
      - value
    color:
      description: 'Sets default for all colors associated with this axis all at once:
        line, font, tick, and grid colors. Grid color is lightened by blending this
        with the plot background Individual pieces can override this.'
      editType: calc
      valType: color
    dtick:
      description: The stride between grid lines along the axis
      dflt: 1
      editType: calc
      min: 0
      valType: number
    editType: calc
    endline:
      description: Determines whether or not a line is drawn at along the final value
        of this axis. If *true*, the end line is drawn on top of the grid lines.
      editType: calc
      valType: boolean
    endlinecolor:
      description: Sets the line color of the end line.
      editType: calc
      valType: color
    endlinewidth:
      description: Sets the width (in px) of the end line.
      dflt: 1
      editType: calc
      valType: number
    exponentformat:
      description: Determines a formatting rule for the tick exponents. For example,
        consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000.
        If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script).
        If *SI*, 1G. If *B*, 1B.
      dflt: B
      editType: calc
      valType: enumerated
      values:
      - none
      - e
      - E
      - power
      - SI
      - B
    fixedrange:
      description: Determines whether or not this axis is zoom-able. If true, then
        zoom is disabled.
      dflt: no
      editType: calc
      valType: boolean
    gridcolor:
      description: Sets the axis line color.
      editType: calc
      valType: color
    gridwidth:
      description: Sets the width (in px) of the axis line.
      dflt: 1
      editType: calc
      min: 0
      valType: number
    labelpadding:
      description: Extra padding between label and the axis
      dflt: 10
      editType: calc
      valType: integer
    labelprefix:
      description: Sets a axis label prefix.
      editType: calc
      valType: string
    labelsuffix:
      description: Sets a axis label suffix.
      dflt: ''
      editType: calc
      valType: string
    linecolor:
      description: Sets the axis line color.
      dflt: '#444'
      editType: calc
      valType: color
    linewidth:
      description: Sets the width (in px) of the axis line.
      dflt: 1
      editType: calc
      min: 0
      valType: number
    minexponent:
      description: Hide SI prefix for 10^n if |n| is below this number
      dflt: 3
      editType: calc
      min: 0
      valType: number
    minorgridcolor:
      description: Sets the color of the grid lines.
      dflt: '#eee'
      editType: calc
      valType: color
    minorgridcount:
      description: Sets the number of minor grid ticks per major grid tick
      dflt: 0
      editType: calc
      min: 0
      valType: integer
    minorgridwidth:
      description: Sets the width (in px) of the grid lines.
      dflt: 1
      editType: calc
      min: 0
      valType: number
    nticks:
      description: Specifies the maximum number of ticks for the particular axis.
        The actual number of ticks will be chosen automatically to be less than or
        equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.
      dflt: 0
      editType: calc
      min: 0
      valType: integer
    range:
      description: Sets the range of this axis. If the axis `type` is *log*, then
        you must take the log of your desired range (e.g. to set the range from 1
        to 100, set the range from 0 to 2). If the axis `type` is *date*, it should
        be date strings, like date data, though Date objects and unix milliseconds
        will be accepted and converted to strings. If the axis `type` is *category*,
        it should be numbers, using the scale where each category is assigned a serial
        number from zero in the order it appears.
      editType: calc
      items:
        editType:
        - calc
        - calc
        valType:
        - any
        - any
      valType: info_array
    rangemode:
      description: If *normal*, the range is computed in relation to the extrema of
        the input data. If *tozero*`, the range extends to 0, regardless of the input
        data If *nonnegative*, the range is non-negative, regardless of the input
        data.
      dflt: normal
      editType: calc
      valType: enumerated
      values:
      - normal
      - tozero
      - nonnegative
    role: object
    separatethousands:
      description: If "true", even 4-digit integers are separated
      dflt: no
      editType: calc
      valType: boolean
    showexponent:
      description: If *all*, all exponents are shown besides their significands. If
        *first*, only the exponent of the first tick is shown. If *last*, only the
        exponent of the last tick is shown. If *none*, no exponents appear.
      dflt: all
      editType: calc
      valType: enumerated
      values:
      - all
      - first
      - last
      - none
    showgrid:
      description: Determines whether or not grid lines are drawn. If *true*, the
        grid lines are drawn at every tick mark.
      dflt: yes
      editType: calc
      valType: boolean
    showline:
      description: Determines whether or not a line bounding this axis is drawn.
      dflt: no
      editType: calc
      valType: boolean
    showticklabels:
      description: Determines whether axis labels are drawn on the low side, the high
        side, both, or neither side of the axis.
      dflt: start
      editType: calc
      valType: enumerated
      values:
      - start
      - end
      - both
      - none
    showtickprefix:
      description: If *all*, all tick labels are displayed with a prefix. If *first*,
        only the first tick is displayed with a prefix. If *last*, only the last tick
        is displayed with a suffix. If *none*, tick prefixes are hidden.
      dflt: all
      editType: calc
      valType: enumerated
      values:
      - all
      - first
      - last
      - none
    showticksuffix:
      description: Same as `showtickprefix` but for tick suffixes.
      dflt: all
      editType: calc
      valType: enumerated
      values:
      - all
      - first
      - last
      - none
    smoothing:
      dflt: 1
      editType: calc
      max: 1.3
      min: 0
      valType: number
    startline:
      description: Determines whether or not a line is drawn at along the starting
        value of this axis. If *true*, the start line is drawn on top of the grid
        lines.
      editType: calc
      valType: boolean
    startlinecolor:
      description: Sets the line color of the start line.
      editType: calc
      valType: color
    startlinewidth:
      description: Sets the width (in px) of the start line.
      dflt: 1
      editType: calc
      valType: number
    tick0:
      description: The starting index of grid lines along the axis
      dflt: 0
      editType: calc
      min: 0
      valType: number
    tickangle:
      description: Sets the angle of the tick labels with respect to the horizontal.
        For example, a `tickangle` of -90 draws the tick labels vertically.
      dflt: auto
      editType: calc
      valType: angle
    tickfont:
      color:
        editType: calc
        valType: color
      description: Sets the tick font.
      editType: calc
      family:
        description: HTML font family - the typeface that will be applied by the web
          browser. The web browser will only be able to apply a font if it is available
          on the system which it operates. Provide multiple font families, separated
          by commas, to indicate the preference in which to apply fonts if they aren't
          available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com
          or on-premise) generates images on a server, where only a select number
          of fonts are installed and supported. These include *Arial*, *Balto*, *Courier
          New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old
          Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times
          New Roman*.
        editType: calc
        noBlank: yes
        strict: yes
        valType: string
      role: object
      size:
        editType: calc
        min: 1
        valType: number
    tickformat:
      description: 'Sets the tick label formatting rule using d3 formatting mini-languages
        which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format.
        And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format.
        We add two items to d3''s date formatter: *%h* for half of the year as a decimal
        number as well as *%{n}f* for fractional seconds with n digits. For example,
        *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*'
      dflt: ''
      editType: calc
      valType: string
    tickformatstops:
      items:
        tickformatstop:
          dtickrange:
            description: range [*min*, *max*], where *min*, *max* - dtick values which
              describe some zoom level, it is possible to omit *min* or *max* value
              by passing *null*
            editType: calc
            items:
              editType:
              - calc
              - calc
              valType:
              - any
              - any
            valType: info_array
          editType: calc
          enabled:
            description: Determines whether or not this stop is used. If `false`,
              this stop is ignored even within its `dtickrange`.
            dflt: yes
            editType: calc
            valType: boolean
          name:
            description: 'When used in a template, named items are created in the
              output figure in addition to any items the figure already has in this
              array. You can modify these items in the output figure by making your
              own item with `templateitemname` matching this `name` alongside your
              modifications (including `visible: false` or `enabled: false` to hide
              it). Has no effect outside of a template.'
            editType: calc
            valType: string
          role: object
          templateitemname:
            description: 'Used to refer to a named item in this array in the template.
              Named items from the template will be created even without a matching
              item in the input figure, but you can modify one by making an item with
              `templateitemname` matching its `name`, alongside your modifications
              (including `visible: false` or `enabled: false` to hide it). If there
              is no template or no matching item, this item will be hidden unless
              you explicitly show it with `visible: true`.'
            editType: calc
            valType: string
          value:
            description: string - dtickformat for described zoom level, the same as
              *tickformat*
            dflt: ''
            editType: calc
            valType: string
      role: object
    tickmode:
      dflt: array
      editType: calc
      valType: enumerated
      values:
      - linear
      - array
    tickprefix:
      description: Sets a tick label prefix.
      dflt: ''
      editType: calc
      valType: string
    ticksuffix:
      description: Sets a tick label suffix.
      dflt: ''
      editType: calc
      valType: string
    ticktext:
      description: Sets the text displayed at the ticks position via `tickvals`. Only
        has an effect if `tickmode` is set to *array*. Used with `tickvals`.
      editType: calc
      valType: data_array
    ticktextsrc:
      description: Sets the source reference on Chart Studio Cloud for  ticktext .
      editType: none
      valType: string
    tickvals:
      description: Sets the values at which ticks on this axis appear. Only has an
        effect if `tickmode` is set to *array*. Used with `ticktext`.
      editType: calc
      valType: data_array
    tickvalssrc:
      description: Sets the source reference on Chart Studio Cloud for  tickvals .
      editType: none
      valType: string
    title:
      editType: calc
      font:
        color:
          editType: calc
          valType: color
        description: Sets this axis' title font. Note that the title's font used to
          be set by the now deprecated `titlefont` attribute.
        editType: calc
        family:
          description: HTML font family - the typeface that will be applied by the
            web browser. The web browser will only be able to apply a font if it is
            available on the system which it operates. Provide multiple font families,
            separated by commas, to indicate the preference in which to apply fonts
            if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com
            or on-premise) generates images on a server, where only a select number
            of fonts are installed and supported. These include *Arial*, *Balto*,
            *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas
            One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*,
            *Times New Roman*.
          editType: calc
          noBlank: yes
          strict: yes
          valType: string
        role: object
        size:
          editType: calc
          min: 1
          valType: number
      offset:
        description: An additional amount by which to offset the title from the tick
          labels, given in pixels. Note that this used to be set by the now deprecated
          `titleoffset` attribute.
        dflt: 10
        editType: calc
        valType: number
      role: object
      text:
        description: Sets the title of this axis. Note that before the existence of
          `title.text`, the title's contents used to be defined as the `title` attribute
          itself. This behavior has been deprecated.
        dflt: ''
        editType: calc
        valType: string
    type:
      description: Sets the axis type. By default, plotly attempts to determined the
        axis type by looking into the data of the traces that referenced the axis
        in question.
      dflt: '-'
      editType: calc
      valType: enumerated
      values:
      - '-'
      - linear
      - date
      - category
  bsrc:
    description: Sets the source reference on Chart Studio Cloud for  b .
    editType: none
    valType: string
  carpet:
    description: An identifier for this carpet, so that `scattercarpet` and `contourcarpet`
      traces can specify a carpet plot on which they lie
    editType: calc
    valType: string
  cheaterslope:
    description: The shift applied to each successive row of data in creating a cheater
      plot. Only used if `x` is been omitted.
    dflt: 1
    editType: calc
    valType: number
  color:
    description: 'Sets default for all colors associated with this axis all at once:
      line, font, tick, and grid colors. Grid color is lightened by blending this
      with the plot background Individual pieces can override this.'
    dflt: '#444'
    editType: plot
    valType: color
  customdata:
    description: Assigns extra data each datum. This may be useful when listening
      to hover, click and selection events. Note that, *scatter* traces also appends
      customdata items in the markers DOM elements
    editType: calc
    valType: data_array
  customdatasrc:
    description: Sets the source reference on Chart Studio Cloud for  customdata .
    editType: none
    valType: string
  da:
    description: Sets the a coordinate step. See `a0` for more info.
    dflt: 1
    editType: calc
    valType: number
  db:
    description: Sets the b coordinate step. See `b0` for more info.
    dflt: 1
    editType: calc
    valType: number
  font:
    color:
      dflt: '#444'
      editType: calc
      valType: color
    description: The default font used for axis & tick labels on this carpet
    editType: calc
    family:
      description: HTML font family - the typeface that will be applied by the web
        browser. The web browser will only be able to apply a font if it is available
        on the system which it operates. Provide multiple font families, separated
        by commas, to indicate the preference in which to apply fonts if they aren't
        available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com
        or on-premise) generates images on a server, where only a select number of
        fonts are installed and supported. These include *Arial*, *Balto*, *Courier
        New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old
        Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times
        New Roman*.
      dflt: '"Open Sans", verdana, arial, sans-serif'
      editType: calc
      noBlank: yes
      strict: yes
      valType: string
    role: object
    size:
      dflt: 12
      editType: calc
      min: 1
      valType: number
  ids:
    anim: yes
    description: Assigns id labels to each datum. These ids for object constancy of
      data points during animation. Should be an array of strings, not numbers or
      any other type.
    editType: calc
    valType: data_array
  idssrc:
    description: Sets the source reference on Chart Studio Cloud for  ids .
    editType: none
    valType: string
  legendgrouptitle:
    editType: style
    font:
      color:
        editType: style
        valType: color
      description: Sets this legend group's title font.
      editType: style
      family:
        description: HTML font family - the typeface that will be applied by the web
          browser. The web browser will only be able to apply a font if it is available
          on the system which it operates. Provide multiple font families, separated
          by commas, to indicate the preference in which to apply fonts if they aren't
          available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com
          or on-premise) generates images on a server, where only a select number
          of fonts are installed and supported. These include *Arial*, *Balto*, *Courier
          New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old
          Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times
          New Roman*.
        editType: style
        noBlank: yes
        strict: yes
        valType: string
      role: object
      size:
        editType: style
        min: 1
        valType: number
    role: object
    text:
      description: Sets the title of the legend group.
      dflt: ''
      editType: style
      valType: string
  legendrank:
    description: Sets the legend rank for this trace. Items and groups with smaller
      ranks are presented on top/left side while with `*reversed* `legend.traceorder`
      they are on bottom/right side. The default legendrank is 1000, so that you can
      use ranks less than 1000 to place certain items before all unranked items, and
      ranks greater than 1000 to go after all unranked items.
    dflt: 1000
    editType: style
    valType: number
  meta:
    arrayOk: yes
    description: Assigns extra meta information associated with this trace that can
      be used in various text attributes. Attributes such as trace `name`, graph,
      axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues`
      and `sliders` `label` text all support `meta`. To access the trace `meta` values
      in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the
      index or key of the `meta` item in question. To access trace `meta` in layout
      attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta`
      and `n` is the trace index.
    editType: plot
    valType: any
  metasrc:
    description: Sets the source reference on Chart Studio Cloud for  meta .
    editType: none
    valType: string
  name:
    description: Sets the trace name. The trace name appear as the legend item and
      on hover.
    editType: style
    valType: string
  opacity:
    description: Sets the opacity of the trace.
    dflt: 1
    editType: style
    max: 1
    min: 0
    valType: number
  stream:
    editType: calc
    maxpoints:
      description: Sets the maximum number of points to keep on the plots from an
        incoming stream. If `maxpoints` is set to *50*, only the newest 50 points
        will be displayed on the plot.
      dflt: 500
      editType: calc
      max: 10000
      min: 0
      valType: number
    role: object
    token:
      description: The stream id number links a data trace on a plot with a stream.
        See https://chart-studio.plotly.com/settings for more details.
      editType: calc
      noBlank: yes
      strict: yes
      valType: string
  type: carpet
  uid:
    anim: yes
    description: Assign an id to this trace, Use this to provide object constancy
      between traces during animations and transitions.
    editType: plot
    valType: string
  uirevision:
    description: 'Controls persistence of some user-driven changes to the trace: `constraintrange`
      in `parcoords` traces, as well as some `editable: true` modifications such as
      `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other
      user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible`
      is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled
      by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config:
      {editable: true}`) is controlled by `layout.editrevision`. Trace changes are
      tracked by `uid`, which only falls back on trace index if no `uid` is provided.
      So if your app can add/remove traces before the end of the `data` array, such
      that the same trace has a different index, you can still preserve user-driven
      changes if you give each trace a `uid` that stays with it as it moves.'
    editType: none
    valType: any
  visible:
    description: Determines whether or not this trace is visible. If *legendonly*,
      the trace is not drawn, but can appear as a legend item (provided that the legend
      itself is visible).
    dflt: yes
    editType: calc
    valType: enumerated
    values:
    - 'TRUE'
    - 'FALSE'
    - legendonly
  x:
    description: A two dimensional array of x coordinates at each carpet point. If
      omitted, the plot is a cheater plot and the xaxis is hidden by default.
    editType: calc+clearAxisTypes
    valType: data_array
  xaxis:
    description: Sets a reference between this trace's x coordinates and a 2D cartesian
      x axis. If *x* (the default value), the x coordinates refer to `layout.xaxis`.
      If *x2*, the x coordinates refer to `layout.xaxis2`, and so on.
    dflt: x
    editType: calc+clearAxisTypes
    valType: subplotid
  xsrc:
    description: Sets the source reference on Chart Studio Cloud for  x .
    editType: none
    valType: string
  'y':
    description: A two dimensional array of y coordinates at each carpet point.
    editType: calc+clearAxisTypes
    valType: data_array
  yaxis:
    description: Sets a reference between this trace's y coordinates and a 2D cartesian
      y axis. If *y* (the default value), the y coordinates refer to `layout.yaxis`.
      If *y2*, the y coordinates refer to `layout.yaxis2`, and so on.
    dflt: 'y'
    editType: calc+clearAxisTypes
    valType: subplotid
  ysrc:
    description: Sets the source reference on Chart Studio Cloud for  y .
    editType: none
    valType: string
categories:
- cartesian
- svg
- carpet
- carpetAxis
- notLegendIsolatable
- noMultiCategory
- noHover
- noSortingByValue
meta:
  description: The data describing carpet axis layout is set in `y` and (optionally)
    also `x`. If only `y` is present, `x` the plot is interpreted as a cheater plot
    and is filled in using the `y` values. `x` and `y` may either be 2D arrays matching
    with each dimension matching that of `a` and `b`, or they may be 1D arrays with
    total length equal to that of `a` and `b`.
type: carpet
