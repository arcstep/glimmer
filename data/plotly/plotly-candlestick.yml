animatable: no
attributes:
  close:
    description: Sets the close values.
    editType: calc
    valType: data_array
  closesrc:
    description: Sets the source reference on Chart Studio Cloud for  close .
    editType: none
    valType: string
  customdata:
    description: Assigns extra data each datum. This may be useful when listening
      to hover, click and selection events. Note that, *scatter* traces also appends
      customdata items in the markers DOM elements
    editType: calc
    valType: data_array
  customdatasrc:
    description: Sets the source reference on Chart Studio Cloud for  customdata .
    editType: none
    valType: string
  decreasing:
    editType: style
    fillcolor:
      description: Sets the fill color. Defaults to a half-transparent variant of
        the line color, marker color, or marker line color, whichever is available.
      editType: style
      valType: color
    line:
      color:
        description: Sets the color of line bounding the box(es).
        dflt: '#FF4136'
        editType: style
        valType: color
      editType: style
      role: object
      width:
        description: Sets the width (in px) of line bounding the box(es).
        dflt: 2
        editType: style
        min: 0
        valType: number
    role: object
  high:
    description: Sets the high values.
    editType: calc
    valType: data_array
  highsrc:
    description: Sets the source reference on Chart Studio Cloud for  high .
    editType: none
    valType: string
  hoverinfo:
    arrayOk: yes
    description: Determines which trace information appear on hover. If `none` or
      `skip` are set, no information is displayed upon hovering. But, if `none` is
      set, click and hover events are still fired.
    dflt: all
    editType: none
    extras:
    - all
    - none
    - skip
    flags:
    - x
    - 'y'
    - z
    - text
    - name
    valType: flaglist
  hoverinfosrc:
    description: Sets the source reference on Chart Studio Cloud for  hoverinfo .
    editType: none
    valType: string
  hoverlabel:
    align:
      arrayOk: yes
      description: Sets the horizontal alignment of the text content within hover
        label box. Has an effect only if the hover label text spans more two or more
        lines
      dflt: auto
      editType: none
      valType: enumerated
      values:
      - left
      - right
      - auto
    alignsrc:
      description: Sets the source reference on Chart Studio Cloud for  align .
      editType: none
      valType: string
    bgcolor:
      arrayOk: yes
      description: Sets the background color of the hover labels for this trace
      editType: none
      valType: color
    bgcolorsrc:
      description: Sets the source reference on Chart Studio Cloud for  bgcolor .
      editType: none
      valType: string
    bordercolor:
      arrayOk: yes
      description: Sets the border color of the hover labels for this trace.
      editType: none
      valType: color
    bordercolorsrc:
      description: Sets the source reference on Chart Studio Cloud for  bordercolor
        .
      editType: none
      valType: string
    editType: none
    font:
      color:
        arrayOk: yes
        editType: none
        valType: color
      colorsrc:
        description: Sets the source reference on Chart Studio Cloud for  color .
        editType: none
        valType: string
      description: Sets the font used in hover labels.
      editType: none
      family:
        arrayOk: yes
        description: HTML font family - the typeface that will be applied by the web
          browser. The web browser will only be able to apply a font if it is available
          on the system which it operates. Provide multiple font families, separated
          by commas, to indicate the preference in which to apply fonts if they aren't
          available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com
          or on-premise) generates images on a server, where only a select number
          of fonts are installed and supported. These include *Arial*, *Balto*, *Courier
          New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old
          Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times
          New Roman*.
        editType: none
        noBlank: yes
        strict: yes
        valType: string
      familysrc:
        description: Sets the source reference on Chart Studio Cloud for  family .
        editType: none
        valType: string
      role: object
      size:
        arrayOk: yes
        editType: none
        min: 1
        valType: number
      sizesrc:
        description: Sets the source reference on Chart Studio Cloud for  size .
        editType: none
        valType: string
    namelength:
      arrayOk: yes
      description: Sets the default length (in number of characters) of the trace
        name in the hover labels for all traces. -1 shows the whole name regardless
        of length. 0-3 shows the first 0-3 characters, and an integer >3 will show
        the whole name if it is less than that many characters, but if it is longer,
        will truncate to `namelength - 3` characters and add an ellipsis.
      dflt: 15
      editType: none
      min: -1
      valType: integer
    namelengthsrc:
      description: Sets the source reference on Chart Studio Cloud for  namelength
        .
      editType: none
      valType: string
    role: object
    split:
      description: Show hover information (open, close, high, low) in separate labels.
      dflt: no
      editType: style
      valType: boolean
  hovertext:
    arrayOk: yes
    description: Same as `text`.
    dflt: ''
    editType: calc
    valType: string
  hovertextsrc:
    description: Sets the source reference on Chart Studio Cloud for  hovertext .
    editType: none
    valType: string
  ids:
    description: Assigns id labels to each datum. These ids for object constancy of
      data points during animation. Should be an array of strings, not numbers or
      any other type.
    editType: calc
    valType: data_array
  idssrc:
    description: Sets the source reference on Chart Studio Cloud for  ids .
    editType: none
    valType: string
  increasing:
    editType: style
    fillcolor:
      description: Sets the fill color. Defaults to a half-transparent variant of
        the line color, marker color, or marker line color, whichever is available.
      editType: style
      valType: color
    line:
      color:
        description: Sets the color of line bounding the box(es).
        dflt: '#3D9970'
        editType: style
        valType: color
      editType: style
      role: object
      width:
        description: Sets the width (in px) of line bounding the box(es).
        dflt: 2
        editType: style
        min: 0
        valType: number
    role: object
  legendgroup:
    description: Sets the legend group for this trace. Traces part of the same legend
      group hide/show at the same time when toggling legend items.
    dflt: ''
    editType: style
    valType: string
  legendgrouptitle:
    editType: style
    font:
      color:
        editType: style
        valType: color
      description: Sets this legend group's title font.
      editType: style
      family:
        description: HTML font family - the typeface that will be applied by the web
          browser. The web browser will only be able to apply a font if it is available
          on the system which it operates. Provide multiple font families, separated
          by commas, to indicate the preference in which to apply fonts if they aren't
          available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com
          or on-premise) generates images on a server, where only a select number
          of fonts are installed and supported. These include *Arial*, *Balto*, *Courier
          New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old
          Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times
          New Roman*.
        editType: style
        noBlank: yes
        strict: yes
        valType: string
      role: object
      size:
        editType: style
        min: 1
        valType: number
    role: object
    text:
      description: Sets the title of the legend group.
      dflt: ''
      editType: style
      valType: string
  legendrank:
    description: Sets the legend rank for this trace. Items and groups with smaller
      ranks are presented on top/left side while with `*reversed* `legend.traceorder`
      they are on bottom/right side. The default legendrank is 1000, so that you can
      use ranks less than 1000 to place certain items before all unranked items, and
      ranks greater than 1000 to go after all unranked items.
    dflt: 1000
    editType: style
    valType: number
  line:
    editType: style
    role: object
    width:
      description: Sets the width (in px) of line bounding the box(es). Note that
        this style setting can also be set per direction via `increasing.line.width`
        and `decreasing.line.width`.
      dflt: 2
      editType: style
      min: 0
      valType: number
  low:
    description: Sets the low values.
    editType: calc
    valType: data_array
  lowsrc:
    description: Sets the source reference on Chart Studio Cloud for  low .
    editType: none
    valType: string
  meta:
    arrayOk: yes
    description: Assigns extra meta information associated with this trace that can
      be used in various text attributes. Attributes such as trace `name`, graph,
      axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues`
      and `sliders` `label` text all support `meta`. To access the trace `meta` values
      in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the
      index or key of the `meta` item in question. To access trace `meta` in layout
      attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta`
      and `n` is the trace index.
    editType: plot
    valType: any
  metasrc:
    description: Sets the source reference on Chart Studio Cloud for  meta .
    editType: none
    valType: string
  name:
    description: Sets the trace name. The trace name appear as the legend item and
      on hover.
    editType: style
    valType: string
  opacity:
    description: Sets the opacity of the trace.
    dflt: 1
    editType: style
    max: 1
    min: 0
    valType: number
  open:
    description: Sets the open values.
    editType: calc
    valType: data_array
  opensrc:
    description: Sets the source reference on Chart Studio Cloud for  open .
    editType: none
    valType: string
  selectedpoints:
    description: Array containing integer indices of selected points. Has an effect
      only for traces that support selections. Note that an empty array means an empty
      selection where the `unselected` are turned on for all points, whereas, any
      other non-array values means no selection all where the `selected` and `unselected`
      styles have no effect.
    editType: calc
    valType: any
  showlegend:
    description: Determines whether or not an item corresponding to this trace is
      shown in the legend.
    dflt: yes
    editType: style
    valType: boolean
  stream:
    editType: calc
    maxpoints:
      description: Sets the maximum number of points to keep on the plots from an
        incoming stream. If `maxpoints` is set to *50*, only the newest 50 points
        will be displayed on the plot.
      dflt: 500
      editType: calc
      max: 10000
      min: 0
      valType: number
    role: object
    token:
      description: The stream id number links a data trace on a plot with a stream.
        See https://chart-studio.plotly.com/settings for more details.
      editType: calc
      noBlank: yes
      strict: yes
      valType: string
  text:
    arrayOk: yes
    description: Sets hover text elements associated with each sample point. If a
      single string, the same string appears over all the data points. If an array
      of string, the items are mapped in order to this trace's sample points.
    dflt: ''
    editType: calc
    valType: string
  textsrc:
    description: Sets the source reference on Chart Studio Cloud for  text .
    editType: none
    valType: string
  transforms:
    items:
      transform:
        description: 'WARNING: All transforms are deprecated and may be removed from
          the API in next major version. An array of operations that manipulate the
          trace data, for example filtering or sorting the data arrays.'
        editType: calc
        role: object
    role: object
  type: candlestick
  uid:
    description: Assign an id to this trace, Use this to provide object constancy
      between traces during animations and transitions.
    editType: plot
    valType: string
  uirevision:
    description: 'Controls persistence of some user-driven changes to the trace: `constraintrange`
      in `parcoords` traces, as well as some `editable: true` modifications such as
      `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other
      user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible`
      is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled
      by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config:
      {editable: true}`) is controlled by `layout.editrevision`. Trace changes are
      tracked by `uid`, which only falls back on trace index if no `uid` is provided.
      So if your app can add/remove traces before the end of the `data` array, such
      that the same trace has a different index, you can still preserve user-driven
      changes if you give each trace a `uid` that stays with it as it moves.'
    editType: none
    valType: any
  visible:
    description: Determines whether or not this trace is visible. If *legendonly*,
      the trace is not drawn, but can appear as a legend item (provided that the legend
      itself is visible).
    dflt: yes
    editType: calc
    valType: enumerated
    values:
    - 'TRUE'
    - 'FALSE'
    - legendonly
  whiskerwidth:
    description: Sets the width of the whiskers relative to the box' width. For example,
      with 1, the whiskers are as wide as the box(es).
    dflt: 0
    editType: calc
    max: 1
    min: 0
    valType: number
  x:
    description: Sets the x coordinates. If absent, linear coordinate will be generated.
    editType: calc+clearAxisTypes
    valType: data_array
  xaxis:
    description: Sets a reference between this trace's x coordinates and a 2D cartesian
      x axis. If *x* (the default value), the x coordinates refer to `layout.xaxis`.
      If *x2*, the x coordinates refer to `layout.xaxis2`, and so on.
    dflt: x
    editType: calc+clearAxisTypes
    valType: subplotid
  xcalendar:
    description: Sets the calendar system to use with `x` date data.
    dflt: gregorian
    editType: calc
    valType: enumerated
    values:
    - chinese
    - coptic
    - discworld
    - ethiopian
    - gregorian
    - hebrew
    - islamic
    - jalali
    - julian
    - mayan
    - nanakshahi
    - nepali
    - persian
    - taiwan
    - thai
    - ummalqura
  xhoverformat:
    description: 'Sets the hover text formatting rulefor `x`  using d3 formatting
      mini-languages which are very similar to those in Python. For numbers, see:
      https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format.
      We add two items to d3''s date formatter: *%h* for half of the year as a decimal
      number as well as *%{n}f* for fractional seconds with n digits. For example,
      *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*By
      default the values are formatted using `xaxis.hoverformat`.'
    dflt: ''
    editType: none
    valType: string
  xperiod:
    description: Only relevant when the axis `type` is *date*. Sets the period positioning
      in milliseconds or *M<n>* on the x axis. Special values in the form of *M<n>*
      could be used to declare the number of months. In this case `n` must be a positive
      integer.
    dflt: 0
    editType: calc
    valType: any
  xperiod0:
    description: Only relevant when the axis `type` is *date*. Sets the base for period
      positioning in milliseconds or date string on the x0 axis. When `x0period` is
      round number of weeks, the `x0period0` by default would be on a Sunday i.e.
      2000-01-02, otherwise it would be at 2000-01-01.
    editType: calc
    valType: any
  xperiodalignment:
    description: Only relevant when the axis `type` is *date*. Sets the alignment
      of data points on the x axis.
    dflt: middle
    editType: calc
    valType: enumerated
    values:
    - start
    - middle
    - end
  xsrc:
    description: Sets the source reference on Chart Studio Cloud for  x .
    editType: none
    valType: string
  yaxis:
    description: Sets a reference between this trace's y coordinates and a 2D cartesian
      y axis. If *y* (the default value), the y coordinates refer to `layout.yaxis`.
      If *y2*, the y coordinates refer to `layout.yaxis2`, and so on.
    dflt: 'y'
    editType: calc+clearAxisTypes
    valType: subplotid
  yhoverformat:
    description: 'Sets the hover text formatting rulefor `y`  using d3 formatting
      mini-languages which are very similar to those in Python. For numbers, see:
      https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format.
      We add two items to d3''s date formatter: *%h* for half of the year as a decimal
      number as well as *%{n}f* for fractional seconds with n digits. For example,
      *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*By
      default the values are formatted using `yaxis.hoverformat`.'
    dflt: ''
    editType: none
    valType: string
categories:
- cartesian
- svg
- showLegend
- candlestick
- boxLayout
layoutAttributes:
  boxgap:
    description: Sets the gap (in plot fraction) between boxes of adjacent location
      coordinates. Has no effect on traces that have *width* set.
    dflt: 0.3
    editType: calc
    max: 1
    min: 0
    valType: number
  boxgroupgap:
    description: Sets the gap (in plot fraction) between boxes of the same location
      coordinate. Has no effect on traces that have *width* set.
    dflt: 0.3
    editType: calc
    max: 1
    min: 0
    valType: number
  boxmode:
    description: Determines how boxes at the same location coordinate are displayed
      on the graph. If *group*, the boxes are plotted next to one another centered
      around the shared location. If *overlay*, the boxes are plotted over one another,
      you might need to set *opacity* to see them multiple boxes. Has no effect on
      traces that have *width* set.
    dflt: overlay
    editType: calc
    valType: enumerated
    values:
    - group
    - overlay
meta:
  description: The candlestick is a style of financial chart describing open, high,
    low and close for a given `x` coordinate (most likely time). The boxes represent
    the spread between the `open` and `close` values and the lines represent the spread
    between the `low` and `high` values Sample points where the close value is higher
    (lower) then the open value are called increasing (decreasing). By default, increasing
    candles are drawn in green whereas decreasing are drawn in red.
type: candlestick
